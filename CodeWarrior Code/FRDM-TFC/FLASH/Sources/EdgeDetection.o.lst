   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"EdgeDetection.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	Kernel
  18              		.section	.bss.Kernel,"aw",%nobits
  19              		.align	2
  22              	Kernel:
  23 0000 00000000 		.space	18
  23      00000000 
  23      00000000 
  23      00000000 
  23      0000
  24 0012 0000     		.section	.bss.blurredImage,"aw",%nobits
  25              		.align	2
  28              	blurredImage:
  29 0000 00000000 		.space	512
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.derivativeImage,"aw",%nobits
  31              		.align	2
  34              	derivativeImage:
  35 0000 00000000 		.space	256
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.global	__aeabi_ui2d
  37              		.global	__aeabi_ddiv
  38              		.global	__aeabi_dmul
  39              		.global	__aeabi_d2uiz
  40              		.section	.text.generateKernel,"ax",%progbits
  41              		.align	2
  42              		.global	generateKernel
  43              		.code	16
  44              		.thumb_func
  46              	generateKernel:
  47              	.LFB0:
  48              		.file 1 "../Sources/EdgeDetection.c"
   1:../Sources/EdgeDetection.c **** /*
   2:../Sources/EdgeDetection.c ****  * EdgeDetection.c
   3:../Sources/EdgeDetection.c ****  *
   4:../Sources/EdgeDetection.c ****  *  Created on: Dec 17, 2014
   5:../Sources/EdgeDetection.c ****  *  Author: Miroslav Dobrev
   6:../Sources/EdgeDetection.c ****  *  
   7:../Sources/EdgeDetection.c ****  *  Implements 1D simplified Canny edge detector, for edge detection in images.
   8:../Sources/EdgeDetection.c ****  */
   9:../Sources/EdgeDetection.c **** 
  10:../Sources/EdgeDetection.c **** #include <math.h>
  11:../Sources/EdgeDetection.c **** 
  12:../Sources/EdgeDetection.c **** #define KERNEL_LENGTH	9			// for SIGMA = 2.0, nominally LENGTH should be 9
  13:../Sources/EdgeDetection.c **** #define SIGMA			2.0f		// Gaussian blur SIGMA value
  14:../Sources/EdgeDetection.c **** 
  15:../Sources/EdgeDetection.c **** #define PI				3.14159f
  16:../Sources/EdgeDetection.c **** #define E				2.71828f
  17:../Sources/EdgeDetection.c **** uint16_t Kernel[KERNEL_LENGTH] = {0};
  18:../Sources/EdgeDetection.c **** #define SIDE_BAND_LENGTH	(KERNEL_LENGTH - 1)/2
  19:../Sources/EdgeDetection.c **** 
  20:../Sources/EdgeDetection.c **** #define FIXED_POINT_RESCALE		8192	// 2^13 used for faster division
  21:../Sources/EdgeDetection.c **** 
  22:../Sources/EdgeDetection.c **** static uint32_t blurredImage[128];
  23:../Sources/EdgeDetection.c **** static int16_t derivativeImage[128];
  24:../Sources/EdgeDetection.c **** 
  25:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  26:../Sources/EdgeDetection.c **** //// Generates Gaussian Kernel
  27:../Sources/EdgeDetection.c **** //	 KERNEL_LENGTH - number of kernel elements including negative and positive areas
  28:../Sources/EdgeDetection.c **** //	 SIGMA		   - standard deviation
  29:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  30:../Sources/EdgeDetection.c **** void generateKernel()
  31:../Sources/EdgeDetection.c **** {
  49              		.loc 1 31 0
  50              		.cfi_startproc
  51 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 20
  54              		.cfi_offset 4, -20
  55              		.cfi_offset 5, -16
  56              		.cfi_offset 6, -12
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 83B0     		sub	sp, sp, #12
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 32
  62 0004 00AF     		add	r7, sp, #0
  63              	.LCFI2:
  64              		.cfi_def_cfa_register 7
  32:../Sources/EdgeDetection.c **** 	unsigned char i;
  33:../Sources/EdgeDetection.c **** 	
  34:../Sources/EdgeDetection.c **** 	if (KERNEL_LENGTH % 2 != 1 || KERNEL_LENGTH < 3)		// KERNEL_LENGTH should be odd => 3
  35:../Sources/EdgeDetection.c **** 		return;
  36:../Sources/EdgeDetection.c **** 	
  37:../Sources/EdgeDetection.c **** 	for(i = 0; i <= SIDE_BAND_LENGTH; i++)
  65              		.loc 1 37 0
  66 0006 FB1D     		add	r3, r7, #7
  67 0008 0022     		mov	r2, #0
  68 000a 1A70     		strb	r2, [r3]
  69 000c 3FE0     		b	.L2
  70              	.L3:
  38:../Sources/EdgeDetection.c **** 		Kernel[i + SIDE_BAND_LENGTH] = FIXED_POINT_RESCALE*(0.39894f*(1.0f/SIGMA)*pow(E,(-pow((i),2.0f))/
  71              		.loc 1 38 0
  72 000e FB1D     		add	r3, r7, #7
  73 0010 1B78     		ldrb	r3, [r3]
  74 0012 1E1D     		add	r6, r3, #4
  75 0014 FB1D     		add	r3, r7, #7
  76 0016 1B78     		ldrb	r3, [r3]
  77 0018 181C     		mov	r0, r3
  78 001a FFF7FEFF 		bl	__aeabi_ui2d
  79 001e 2D4B     		ldr	r3, .L7+4
  80 0020 2B4A     		ldr	r2, .L7
  81 0022 FFF7FEFF 		bl	pow
  82 0026 021C     		mov	r2, r0
  83 0028 0B1C     		mov	r3, r1
  84 002a 111C     		mov	r1, r2
  85 002c 0C1C     		mov	r4, r1
  86 002e 8021     		mov	r1, #128
  87 0030 0906     		lsl	r1, r1, #24
  88 0032 0D1C     		mov	r5, r1
  89 0034 5D40     		eor	r5, r3
  90 0036 201C     		mov	r0, r4
  91 0038 291C     		mov	r1, r5
  92 003a 274A     		ldr	r2, .L7+8
  93 003c 274B     		ldr	r3, .L7+12
  94 003e FFF7FEFF 		bl	__aeabi_ddiv
  95 0042 021C     		mov	r2, r0
  96 0044 0B1C     		mov	r3, r1
  97 0046 2648     		ldr	r0, .L7+16
  98 0048 2649     		ldr	r1, .L7+20
  99 004a FFF7FEFF 		bl	pow
 100 004e 021C     		mov	r2, r0
 101 0050 0B1C     		mov	r3, r1
 102 0052 101C     		mov	r0, r2
 103 0054 191C     		mov	r1, r3
 104 0056 244A     		ldr	r2, .L7+24
 105 0058 244B     		ldr	r3, .L7+28
 106 005a FFF7FEFF 		bl	__aeabi_dmul
 107 005e 021C     		mov	r2, r0
 108 0060 0B1C     		mov	r3, r1
 109 0062 101C     		mov	r0, r2
 110 0064 191C     		mov	r1, r3
 111 0066 224A     		ldr	r2, .L7+32
 112 0068 224B     		ldr	r3, .L7+36
 113 006a FFF7FEFF 		bl	__aeabi_dmul
 114 006e 021C     		mov	r2, r0
 115 0070 0B1C     		mov	r3, r1
 116 0072 101C     		mov	r0, r2
 117 0074 191C     		mov	r1, r3
 118 0076 FFF7FEFF 		bl	__aeabi_d2uiz
 119 007a 031C     		mov	r3, r0
 120 007c 99B2     		uxth	r1, r3
 121 007e 1E4B     		ldr	r3, .L7+40
 122 0080 7200     		lsl	r2, r6, #1
 123 0082 D152     		strh	r1, [r2, r3]
  37:../Sources/EdgeDetection.c **** 	for(i = 0; i <= SIDE_BAND_LENGTH; i++)
 124              		.loc 1 37 0
 125 0084 FB1D     		add	r3, r7, #7
 126 0086 FA1D     		add	r2, r7, #7
 127 0088 1278     		ldrb	r2, [r2]
 128 008a 0132     		add	r2, r2, #1
 129 008c 1A70     		strb	r2, [r3]
 130              	.L2:
  37:../Sources/EdgeDetection.c **** 	for(i = 0; i <= SIDE_BAND_LENGTH; i++)
 131              		.loc 1 37 0 is_stmt 0
 132 008e FB1D     		add	r3, r7, #7
 133 0090 1B78     		ldrb	r3, [r3]
 134 0092 042B     		cmp	r3, #4
 135 0094 BBD9     		bls	.L3
  39:../Sources/EdgeDetection.c **** 	
  40:../Sources/EdgeDetection.c **** 	for(i = 0; i < SIDE_BAND_LENGTH; i++)
 136              		.loc 1 40 0 is_stmt 1
 137 0096 FB1D     		add	r3, r7, #7
 138 0098 0022     		mov	r2, #0
 139 009a 1A70     		strb	r2, [r3]
 140 009c 10E0     		b	.L4
 141              	.L5:
  41:../Sources/EdgeDetection.c **** 		Kernel[i] = Kernel[KERNEL_LENGTH - 1 - i];
 142              		.loc 1 41 0
 143 009e FB1D     		add	r3, r7, #7
 144 00a0 1A78     		ldrb	r2, [r3]
 145 00a2 FB1D     		add	r3, r7, #7
 146 00a4 1B78     		ldrb	r3, [r3]
 147 00a6 0821     		mov	r1, #8
 148 00a8 C91A     		sub	r1, r1, r3
 149 00aa 134B     		ldr	r3, .L7+40
 150 00ac 4900     		lsl	r1, r1, #1
 151 00ae C95A     		ldrh	r1, [r1, r3]
 152 00b0 114B     		ldr	r3, .L7+40
 153 00b2 5200     		lsl	r2, r2, #1
 154 00b4 D152     		strh	r1, [r2, r3]
  40:../Sources/EdgeDetection.c **** 	for(i = 0; i < SIDE_BAND_LENGTH; i++)
 155              		.loc 1 40 0
 156 00b6 FB1D     		add	r3, r7, #7
 157 00b8 FA1D     		add	r2, r7, #7
 158 00ba 1278     		ldrb	r2, [r2]
 159 00bc 0132     		add	r2, r2, #1
 160 00be 1A70     		strb	r2, [r3]
 161              	.L4:
  40:../Sources/EdgeDetection.c **** 	for(i = 0; i < SIDE_BAND_LENGTH; i++)
 162              		.loc 1 40 0 is_stmt 0
 163 00c0 FB1D     		add	r3, r7, #7
 164 00c2 1B78     		ldrb	r3, [r3]
 165 00c4 032B     		cmp	r3, #3
 166 00c6 EAD9     		bls	.L5
  42:../Sources/EdgeDetection.c **** }
 167              		.loc 1 42 0 is_stmt 1
 168 00c8 BD46     		mov	sp, r7
 169 00ca 03B0     		add	sp, sp, #12
 170              		@ sp needed for prologue
 171 00cc F0BD     		pop	{r4, r5, r6, r7, pc}
 172              	.L8:
 173 00ce C046     		.align	3
 174              	.L7:
 175 00d0 00000000 		.word	0
 176 00d4 00000040 		.word	1073741824
 177 00d8 00000000 		.word	0
 178 00dc 00002040 		.word	1075838976
 179 00e0 000000A0 		.word	-1610612736
 180 00e4 09BF0540 		.word	1074118409
 181 00e8 000000A0 		.word	-1610612736
 182 00ec 3B88C93F 		.word	1070172219
 183 00f0 00000000 		.word	0
 184 00f4 0000C040 		.word	1086324736
 185 00f8 00000000 		.word	Kernel
 186              		.cfi_endproc
 187              	.LFE0:
 189 00fc C046C046 		.section	.text.blurImage,"ax",%progbits
 190              		.align	2
 191              		.global	blurImage
 192              		.code	16
 193              		.thumb_func
 195              	blurImage:
 196              	.LFB1:
  43:../Sources/EdgeDetection.c **** 
  44:../Sources/EdgeDetection.c **** 
  45:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  46:../Sources/EdgeDetection.c **** //// Blurs image array using Gaussian kernel
  47:../Sources/EdgeDetection.c **** //	 First and last SIDE_BAND_LENGTH pixels are corrupted due to
  48:../Sources/EdgeDetection.c **** //	 end effects of the convolution used for the bluring
  49:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  50:../Sources/EdgeDetection.c **** void blurImage(volatile uint16_t* Image, const uint32_t ImageLen, uint32_t* Result)
  51:../Sources/EdgeDetection.c **** {
 197              		.loc 1 51 0
 198              		.cfi_startproc
 199 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 200              	.LCFI3:
 201              		.cfi_def_cfa_offset 20
 202              		.cfi_offset 4, -20
 203              		.cfi_offset 5, -16
 204              		.cfi_offset 6, -12
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 4746     		mov	r7, r8
 208 0004 80B4     		push	{r7}
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 24
 211              		.cfi_offset 8, -24
 212 0006 86B0     		sub	sp, sp, #24
 213              	.LCFI5:
 214              		.cfi_def_cfa_offset 48
 215 0008 00AF     		add	r7, sp, #0
 216              	.LCFI6:
 217              		.cfi_def_cfa_register 7
 218 000a F860     		str	r0, [r7, #12]
 219 000c B960     		str	r1, [r7, #8]
 220 000e 7A60     		str	r2, [r7, #4]
  52:../Sources/EdgeDetection.c **** 	uint32_t n;
  53:../Sources/EdgeDetection.c **** 	register uint32_t kmin, kmax, k;
  54:../Sources/EdgeDetection.c **** 	register uint32_t offset = 0;
 221              		.loc 1 54 0
 222 0010 0023     		mov	r3, #0
 223 0012 9846     		mov	r8, r3
  55:../Sources/EdgeDetection.c **** 	  
  56:../Sources/EdgeDetection.c **** 	if (KERNEL_LENGTH % 2 != 1 || KERNEL_LENGTH < 3)		// KERNEL_LENGTH should be odd => 3
  57:../Sources/EdgeDetection.c **** 		return;
  58:../Sources/EdgeDetection.c **** 	
  59:../Sources/EdgeDetection.c **** 	for (n = 0 ; n <= ImageLen - 1 ; n++)
 224              		.loc 1 59 0
 225 0014 0023     		mov	r3, #0
 226 0016 7B61     		str	r3, [r7, #20]
 227 0018 54E0     		b	.L10
 228              	.L19:
  60:../Sources/EdgeDetection.c ****     {
  61:../Sources/EdgeDetection.c **** 		Result[n] = 0;
 229              		.loc 1 61 0
 230 001a 7B69     		ldr	r3, [r7, #20]
 231 001c 9B00     		lsl	r3, r3, #2
 232 001e 7A68     		ldr	r2, [r7, #4]
 233 0020 D318     		add	r3, r2, r3
 234 0022 0022     		mov	r2, #0
 235 0024 1A60     		str	r2, [r3]
  62:../Sources/EdgeDetection.c **** 	
  63:../Sources/EdgeDetection.c **** 		kmin = (n >= SIDE_BAND_LENGTH) ? (n - SIDE_BAND_LENGTH) : 0;
 236              		.loc 1 63 0
 237 0026 7B69     		ldr	r3, [r7, #20]
 238 0028 032B     		cmp	r3, #3
 239 002a 02D9     		bls	.L11
 240              		.loc 1 63 0 is_stmt 0
 241 002c 7B69     		ldr	r3, [r7, #20]
 242 002e 043B     		sub	r3, r3, #4
 243 0030 00E0     		b	.L12
 244              	.L11:
 245              		.loc 1 63 0
 246 0032 0023     		mov	r3, #0
 247              	.L12:
 248              		.loc 1 63 0
 249 0034 1D1C     		mov	r5, r3
  64:../Sources/EdgeDetection.c **** 		kmax = (n <= ImageLen - 1 - SIDE_BAND_LENGTH) ? (n + SIDE_BAND_LENGTH) : (ImageLen - 1);	
 250              		.loc 1 64 0 is_stmt 1
 251 0036 BB68     		ldr	r3, [r7, #8]
 252 0038 5A1F     		sub	r2, r3, #5
 253 003a 7B69     		ldr	r3, [r7, #20]
 254 003c 9A42     		cmp	r2, r3
 255 003e 02D3     		bcc	.L13
 256              		.loc 1 64 0 is_stmt 0
 257 0040 7B69     		ldr	r3, [r7, #20]
 258 0042 0433     		add	r3, r3, #4
 259 0044 01E0     		b	.L14
 260              	.L13:
 261              		.loc 1 64 0
 262 0046 BB68     		ldr	r3, [r7, #8]
 263 0048 013B     		sub	r3, r3, #1
 264              	.L14:
 265              		.loc 1 64 0
 266 004a 1E1C     		mov	r6, r3
  65:../Sources/EdgeDetection.c **** 		offset = (n <= ImageLen - 1 - SIDE_BAND_LENGTH) ? (KERNEL_LENGTH - (kmax - kmin + 1)) : 0;
 267              		.loc 1 65 0 is_stmt 1
 268 004c BB68     		ldr	r3, [r7, #8]
 269 004e 5A1F     		sub	r2, r3, #5
 270 0050 7B69     		ldr	r3, [r7, #20]
 271 0052 9A42     		cmp	r2, r3
 272 0054 03D3     		bcc	.L15
 273              		.loc 1 65 0 is_stmt 0
 274 0056 731B     		sub	r3, r6, r5
 275 0058 DB43     		mvn	r3, r3
 276 005a 0933     		add	r3, r3, #9
 277 005c 00E0     		b	.L16
 278              	.L15:
 279              		.loc 1 65 0
 280 005e 0023     		mov	r3, #0
 281              	.L16:
 282              		.loc 1 65 0
 283 0060 9846     		mov	r8, r3
  66:../Sources/EdgeDetection.c **** 	
  67:../Sources/EdgeDetection.c **** 		for (k = kmin; k <= kmax; k++)
 284              		.loc 1 67 0 is_stmt 1
 285 0062 2C1C     		mov	r4, r5
 286 0064 1CE0     		b	.L17
 287              	.L18:
  68:../Sources/EdgeDetection.c **** 		{
  69:../Sources/EdgeDetection.c **** 			Result[n] += Image[k] * Kernel[k - kmin + offset];
 288              		.loc 1 69 0
 289 0066 7B69     		ldr	r3, [r7, #20]
 290 0068 9B00     		lsl	r3, r3, #2
 291 006a 7A68     		ldr	r2, [r7, #4]
 292 006c D218     		add	r2, r2, r3
 293 006e 3A60     		str	r2, [r7]
 294 0070 7A69     		ldr	r2, [r7, #20]
 295 0072 9200     		lsl	r2, r2, #2
 296 0074 7968     		ldr	r1, [r7, #4]
 297 0076 8A18     		add	r2, r1, r2
 298 0078 1168     		ldr	r1, [r2]
 299 007a 6200     		lsl	r2, r4, #1
 300 007c F868     		ldr	r0, [r7, #12]
 301 007e 8218     		add	r2, r0, r2
 302 0080 1288     		ldrh	r2, [r2]
 303 0082 92B2     		uxth	r2, r2
 304 0084 601B     		sub	r0, r4, r5
 305 0086 8446     		mov	ip, r0
 306 0088 C444     		add	ip, ip, r8
 307 008a 1348     		ldr	r0, .L21
 308 008c 6346     		mov	r3, ip
 309 008e 5B00     		lsl	r3, r3, #1
 310 0090 9C46     		mov	ip, r3
 311 0092 6346     		mov	r3, ip
 312 0094 185A     		ldrh	r0, [r3, r0]
 313 0096 4243     		mul	r2, r0
 314 0098 8A18     		add	r2, r1, r2
 315 009a 3B68     		ldr	r3, [r7]
 316 009c 1A60     		str	r2, [r3]
  67:../Sources/EdgeDetection.c **** 		for (k = kmin; k <= kmax; k++)
 317              		.loc 1 67 0
 318 009e 0134     		add	r4, r4, #1
 319              	.L17:
  67:../Sources/EdgeDetection.c **** 		for (k = kmin; k <= kmax; k++)
 320              		.loc 1 67 0 is_stmt 0
 321 00a0 B442     		cmp	r4, r6
 322 00a2 E0D9     		bls	.L18
  70:../Sources/EdgeDetection.c **** 		}
  71:../Sources/EdgeDetection.c **** 		
  72:../Sources/EdgeDetection.c **** 		Result[n] = (Result[n]/FIXED_POINT_RESCALE) & 0x0000FFFF;		// Fixed point rescaling
 323              		.loc 1 72 0 is_stmt 1
 324 00a4 7B69     		ldr	r3, [r7, #20]
 325 00a6 9B00     		lsl	r3, r3, #2
 326 00a8 7A68     		ldr	r2, [r7, #4]
 327 00aa D318     		add	r3, r2, r3
 328 00ac 7A69     		ldr	r2, [r7, #20]
 329 00ae 9200     		lsl	r2, r2, #2
 330 00b0 7968     		ldr	r1, [r7, #4]
 331 00b2 8A18     		add	r2, r1, r2
 332 00b4 1268     		ldr	r2, [r2]
 333 00b6 520B     		lsr	r2, r2, #13
 334 00b8 1204     		lsl	r2, r2, #16
 335 00ba 120C     		lsr	r2, r2, #16
 336 00bc 1A60     		str	r2, [r3]
  59:../Sources/EdgeDetection.c **** 	for (n = 0 ; n <= ImageLen - 1 ; n++)
 337              		.loc 1 59 0
 338 00be 7B69     		ldr	r3, [r7, #20]
 339 00c0 0133     		add	r3, r3, #1
 340 00c2 7B61     		str	r3, [r7, #20]
 341              	.L10:
  59:../Sources/EdgeDetection.c **** 	for (n = 0 ; n <= ImageLen - 1 ; n++)
 342              		.loc 1 59 0 is_stmt 0
 343 00c4 BB68     		ldr	r3, [r7, #8]
 344 00c6 5A1E     		sub	r2, r3, #1
 345 00c8 7B69     		ldr	r3, [r7, #20]
 346 00ca 9A42     		cmp	r2, r3
 347 00cc A5D2     		bcs	.L19
  73:../Sources/EdgeDetection.c ****     }
  74:../Sources/EdgeDetection.c **** }
 348              		.loc 1 74 0 is_stmt 1
 349 00ce BD46     		mov	sp, r7
 350 00d0 06B0     		add	sp, sp, #24
 351              		@ sp needed for prologue
 352 00d2 04BC     		pop	{r2}
 353 00d4 9046     		mov	r8, r2
 354 00d6 F0BD     		pop	{r4, r5, r6, r7, pc}
 355              	.L22:
 356              		.align	2
 357              	.L21:
 358 00d8 00000000 		.word	Kernel
 359              		.cfi_endproc
 360              	.LFE1:
 362              		.section	.text.sobelDerivative,"ax",%progbits
 363              		.align	2
 364              		.global	sobelDerivative
 365              		.code	16
 366              		.thumb_func
 368              	sobelDerivative:
 369              	.LFB2:
  75:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  76:../Sources/EdgeDetection.c **** 
  77:../Sources/EdgeDetection.c **** 
  78:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  79:../Sources/EdgeDetection.c **** //// Applies a Sobel operator to the image to get the gradient of the image
  80:../Sources/EdgeDetection.c **** //	 The first and last pixels of the image do not provide a derivative value
  81:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  82:../Sources/EdgeDetection.c **** void sobelDerivative(const uint32_t* Image, const uint32_t ImageLen, int16_t* Result)
  83:../Sources/EdgeDetection.c **** {
 370              		.loc 1 83 0
 371              		.cfi_startproc
 372 0000 90B5     		push	{r4, r7, lr}
 373              	.LCFI7:
 374              		.cfi_def_cfa_offset 12
 375              		.cfi_offset 4, -12
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 0002 85B0     		sub	sp, sp, #20
 379              	.LCFI8:
 380              		.cfi_def_cfa_offset 32
 381 0004 00AF     		add	r7, sp, #0
 382              	.LCFI9:
 383              		.cfi_def_cfa_register 7
 384 0006 F860     		str	r0, [r7, #12]
 385 0008 B960     		str	r1, [r7, #8]
 386 000a 7A60     		str	r2, [r7, #4]
  84:../Sources/EdgeDetection.c **** 	register uint32_t i;
  85:../Sources/EdgeDetection.c **** 	
  86:../Sources/EdgeDetection.c **** 	if (ImageLen < 3)	// The image should be at least 3 pixels long
 387              		.loc 1 86 0
 388 000c BB68     		ldr	r3, [r7, #8]
 389 000e 022B     		cmp	r3, #2
 390 0010 24D9     		bls	.L28
 391              	.L24:
  87:../Sources/EdgeDetection.c **** 		return;
  88:../Sources/EdgeDetection.c **** 	
  89:../Sources/EdgeDetection.c **** 	for (i = 1; i <= ImageLen - 2; i++)
 392              		.loc 1 89 0
 393 0012 0124     		mov	r4, #1
 394 0014 13E0     		b	.L26
 395              	.L27:
  90:../Sources/EdgeDetection.c **** 	{
  91:../Sources/EdgeDetection.c **** 		Result[i] = Image[i+1] - Image[i-1];
 396              		.loc 1 91 0
 397 0016 6300     		lsl	r3, r4, #1
 398 0018 7A68     		ldr	r2, [r7, #4]
 399 001a D218     		add	r2, r2, r3
 400 001c 631C     		add	r3, r4, #1
 401 001e 9B00     		lsl	r3, r3, #2
 402 0020 F968     		ldr	r1, [r7, #12]
 403 0022 CB18     		add	r3, r1, r3
 404 0024 1B68     		ldr	r3, [r3]
 405 0026 99B2     		uxth	r1, r3
 406 0028 631E     		sub	r3, r4, #1
 407 002a 9B00     		lsl	r3, r3, #2
 408 002c F868     		ldr	r0, [r7, #12]
 409 002e C318     		add	r3, r0, r3
 410 0030 1B68     		ldr	r3, [r3]
 411 0032 9BB2     		uxth	r3, r3
 412 0034 CB1A     		sub	r3, r1, r3
 413 0036 9BB2     		uxth	r3, r3
 414 0038 9BB2     		uxth	r3, r3
 415 003a 1380     		strh	r3, [r2]
  89:../Sources/EdgeDetection.c **** 	for (i = 1; i <= ImageLen - 2; i++)
 416              		.loc 1 89 0
 417 003c 0134     		add	r4, r4, #1
 418              	.L26:
  89:../Sources/EdgeDetection.c **** 	for (i = 1; i <= ImageLen - 2; i++)
 419              		.loc 1 89 0 is_stmt 0
 420 003e BB68     		ldr	r3, [r7, #8]
 421 0040 023B     		sub	r3, r3, #2
 422 0042 A342     		cmp	r3, r4
 423 0044 E7D2     		bcs	.L27
  92:../Sources/EdgeDetection.c **** 	}
  93:../Sources/EdgeDetection.c **** 	
  94:../Sources/EdgeDetection.c **** 	Result[0] = 0;
 424              		.loc 1 94 0 is_stmt 1
 425 0046 7B68     		ldr	r3, [r7, #4]
 426 0048 0022     		mov	r2, #0
 427 004a 1A80     		strh	r2, [r3]
  95:../Sources/EdgeDetection.c **** 	Result[ImageLen - 1] = 0;
 428              		.loc 1 95 0
 429 004c BB68     		ldr	r3, [r7, #8]
 430 004e 013B     		sub	r3, r3, #1
 431 0050 5B00     		lsl	r3, r3, #1
 432 0052 7A68     		ldr	r2, [r7, #4]
 433 0054 D318     		add	r3, r2, r3
 434 0056 0022     		mov	r2, #0
 435 0058 1A80     		strh	r2, [r3]
 436 005a 00E0     		b	.L23
 437              	.L28:
  87:../Sources/EdgeDetection.c **** 		return;
 438              		.loc 1 87 0
 439 005c C046     		mov	r8, r8
 440              	.L23:
  96:../Sources/EdgeDetection.c **** }
 441              		.loc 1 96 0
 442 005e BD46     		mov	sp, r7
 443 0060 05B0     		add	sp, sp, #20
 444              		@ sp needed for prologue
 445 0062 90BD     		pop	{r4, r7, pc}
 446              		.cfi_endproc
 447              	.LFE2:
 449              		.section	.text.findLocalMax,"ax",%progbits
 450              		.align	2
 451              		.global	findLocalMax
 452              		.code	16
 453              		.thumb_func
 455              	findLocalMax:
 456              	.LFB3:
  97:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
  98:../Sources/EdgeDetection.c **** 
  99:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
 100:../Sources/EdgeDetection.c **** //// Non-Maximal Supression
 101:../Sources/EdgeDetection.c **** //	 Leaves just the local maximums (centre of the edges)
 102:../Sources/EdgeDetection.c **** //	 The scan starts from 3rd pixel since 1st = 0 and 2nd needed for calculation
 103:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
 104:../Sources/EdgeDetection.c **** void findLocalMax(const int16_t* derivativeArray, const uint32_t arrayLen, int16_t* Result)
 105:../Sources/EdgeDetection.c **** {
 457              		.loc 1 105 0
 458              		.cfi_startproc
 459 0000 90B5     		push	{r4, r7, lr}
 460              	.LCFI10:
 461              		.cfi_def_cfa_offset 12
 462              		.cfi_offset 4, -12
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
 465 0002 85B0     		sub	sp, sp, #20
 466              	.LCFI11:
 467              		.cfi_def_cfa_offset 32
 468 0004 00AF     		add	r7, sp, #0
 469              	.LCFI12:
 470              		.cfi_def_cfa_register 7
 471 0006 F860     		str	r0, [r7, #12]
 472 0008 B960     		str	r1, [r7, #8]
 473 000a 7A60     		str	r2, [r7, #4]
 106:../Sources/EdgeDetection.c **** 	register uint32_t i;
 107:../Sources/EdgeDetection.c **** 	
 108:../Sources/EdgeDetection.c **** 	for (i = 2; i <= arrayLen - 3; i++)
 474              		.loc 1 108 0
 475 000c 0224     		mov	r4, #2
 476 000e 42E0     		b	.L30
 477              	.L35:
 109:../Sources/EdgeDetection.c **** 	{   
 110:../Sources/EdgeDetection.c **** 		if ((derivativeArray[i] >= derivativeArray[i-1] && derivativeArray[i] >= derivativeArray[i+1]) ||
 478              		.loc 1 110 0
 479 0010 6300     		lsl	r3, r4, #1
 480 0012 FA68     		ldr	r2, [r7, #12]
 481 0014 D318     		add	r3, r2, r3
 482 0016 1A88     		ldrh	r2, [r3]
 483 0018 631E     		sub	r3, r4, #1
 484 001a 5B00     		lsl	r3, r3, #1
 485 001c F968     		ldr	r1, [r7, #12]
 486 001e CB18     		add	r3, r1, r3
 487 0020 1B88     		ldrh	r3, [r3]
 488 0022 12B2     		sxth	r2, r2
 489 0024 1BB2     		sxth	r3, r3
 490 0026 9A42     		cmp	r2, r3
 491 0028 0CDB     		blt	.L31
 492              		.loc 1 110 0 is_stmt 0
 493 002a 6300     		lsl	r3, r4, #1
 494 002c FA68     		ldr	r2, [r7, #12]
 495 002e D318     		add	r3, r2, r3
 496 0030 1A88     		ldrh	r2, [r3]
 497 0032 631C     		add	r3, r4, #1
 498 0034 5B00     		lsl	r3, r3, #1
 499 0036 F968     		ldr	r1, [r7, #12]
 500 0038 CB18     		add	r3, r1, r3
 501 003a 1B88     		ldrh	r3, [r3]
 502 003c 12B2     		sxth	r2, r2
 503 003e 1BB2     		sxth	r3, r3
 504 0040 9A42     		cmp	r2, r3
 505 0042 19DA     		bge	.L32
 506              	.L31:
 507              		.loc 1 110 0
 508 0044 6300     		lsl	r3, r4, #1
 509 0046 FA68     		ldr	r2, [r7, #12]
 510 0048 D318     		add	r3, r2, r3
 511 004a 1A88     		ldrh	r2, [r3]
 512 004c 631E     		sub	r3, r4, #1
 513 004e 5B00     		lsl	r3, r3, #1
 514 0050 F968     		ldr	r1, [r7, #12]
 515 0052 CB18     		add	r3, r1, r3
 516 0054 1B88     		ldrh	r3, [r3]
 517 0056 12B2     		sxth	r2, r2
 518 0058 1BB2     		sxth	r3, r3
 519 005a 9A42     		cmp	r2, r3
 520 005c 15DC     		bgt	.L33
 521              		.loc 1 110 0
 522 005e 6300     		lsl	r3, r4, #1
 523 0060 FA68     		ldr	r2, [r7, #12]
 524 0062 D318     		add	r3, r2, r3
 525 0064 1A88     		ldrh	r2, [r3]
 526 0066 631C     		add	r3, r4, #1
 527 0068 5B00     		lsl	r3, r3, #1
 528 006a F968     		ldr	r1, [r7, #12]
 529 006c CB18     		add	r3, r1, r3
 530 006e 1B88     		ldrh	r3, [r3]
 531 0070 12B2     		sxth	r2, r2
 532 0072 1BB2     		sxth	r3, r3
 533 0074 9A42     		cmp	r2, r3
 534 0076 08DC     		bgt	.L33
 535              	.L32:
 111:../Sources/EdgeDetection.c **** 		{
 112:../Sources/EdgeDetection.c **** 			Result[i] = derivativeArray[i];
 536              		.loc 1 112 0 is_stmt 1
 537 0078 6300     		lsl	r3, r4, #1
 538 007a 7A68     		ldr	r2, [r7, #4]
 539 007c D318     		add	r3, r2, r3
 540 007e 6200     		lsl	r2, r4, #1
 541 0080 F968     		ldr	r1, [r7, #12]
 542 0082 8A18     		add	r2, r1, r2
 543 0084 1288     		ldrh	r2, [r2]
 544 0086 1A80     		strh	r2, [r3]
 545 0088 04E0     		b	.L34
 546              	.L33:
 113:../Sources/EdgeDetection.c **** 		}
 114:../Sources/EdgeDetection.c **** 		else
 115:../Sources/EdgeDetection.c **** 		{
 116:../Sources/EdgeDetection.c **** 			Result[i] = 0;
 547              		.loc 1 116 0
 548 008a 6300     		lsl	r3, r4, #1
 549 008c 7A68     		ldr	r2, [r7, #4]
 550 008e D318     		add	r3, r2, r3
 551 0090 0022     		mov	r2, #0
 552 0092 1A80     		strh	r2, [r3]
 553              	.L34:
 108:../Sources/EdgeDetection.c **** 	for (i = 2; i <= arrayLen - 3; i++)
 554              		.loc 1 108 0
 555 0094 0134     		add	r4, r4, #1
 556              	.L30:
 108:../Sources/EdgeDetection.c **** 	for (i = 2; i <= arrayLen - 3; i++)
 557              		.loc 1 108 0 is_stmt 0
 558 0096 BB68     		ldr	r3, [r7, #8]
 559 0098 033B     		sub	r3, r3, #3
 560 009a A342     		cmp	r3, r4
 561 009c B8D2     		bcs	.L35
 117:../Sources/EdgeDetection.c **** 		}
 118:../Sources/EdgeDetection.c **** 	}
 119:../Sources/EdgeDetection.c **** 	
 120:../Sources/EdgeDetection.c **** 	Result[0] = 0;
 562              		.loc 1 120 0 is_stmt 1
 563 009e 7B68     		ldr	r3, [r7, #4]
 564 00a0 0022     		mov	r2, #0
 565 00a2 1A80     		strh	r2, [r3]
 121:../Sources/EdgeDetection.c **** 	Result[1] = 0;
 566              		.loc 1 121 0
 567 00a4 7B68     		ldr	r3, [r7, #4]
 568 00a6 0233     		add	r3, r3, #2
 569 00a8 0022     		mov	r2, #0
 570 00aa 1A80     		strh	r2, [r3]
 122:../Sources/EdgeDetection.c **** 	Result[arrayLen-1] = 0;
 571              		.loc 1 122 0
 572 00ac BB68     		ldr	r3, [r7, #8]
 573 00ae 013B     		sub	r3, r3, #1
 574 00b0 5B00     		lsl	r3, r3, #1
 575 00b2 7A68     		ldr	r2, [r7, #4]
 576 00b4 D318     		add	r3, r2, r3
 577 00b6 0022     		mov	r2, #0
 578 00b8 1A80     		strh	r2, [r3]
 123:../Sources/EdgeDetection.c **** 	Result[arrayLen-2] = 0;
 579              		.loc 1 123 0
 580 00ba BB68     		ldr	r3, [r7, #8]
 581 00bc 023B     		sub	r3, r3, #2
 582 00be 5B00     		lsl	r3, r3, #1
 583 00c0 7A68     		ldr	r2, [r7, #4]
 584 00c2 D318     		add	r3, r2, r3
 585 00c4 0022     		mov	r2, #0
 586 00c6 1A80     		strh	r2, [r3]
 124:../Sources/EdgeDetection.c **** }
 587              		.loc 1 124 0
 588 00c8 BD46     		mov	sp, r7
 589 00ca 05B0     		add	sp, sp, #20
 590              		@ sp needed for prologue
 591 00cc 90BD     		pop	{r4, r7, pc}
 592              		.cfi_endproc
 593              	.LFE3:
 595 00ce C046     		.section	.text.edgeDetection,"ax",%progbits
 596              		.align	2
 597              		.global	edgeDetection
 598              		.code	16
 599              		.thumb_func
 601              	edgeDetection:
 602              	.LFB4:
 125:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
 126:../Sources/EdgeDetection.c **** 
 127:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
 128:../Sources/EdgeDetection.c **** //// Main function for the edge detection
 129:../Sources/EdgeDetection.c **** //	 input - captured image from camera
 130:../Sources/EdgeDetection.c **** //	 output - array with detected edges
 131:../Sources/EdgeDetection.c **** //	 length - length of the arrays
 132:../Sources/EdgeDetection.c **** //////////////////////////////////////////////////////////////////////////
 133:../Sources/EdgeDetection.c **** void edgeDetection(volatile uint16_t* input, int16_t* output, const uint32_t length)
 134:../Sources/EdgeDetection.c **** {		
 603              		.loc 1 134 0
 604              		.cfi_startproc
 605 0000 80B5     		push	{r7, lr}
 606              	.LCFI13:
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0002 84B0     		sub	sp, sp, #16
 611              	.LCFI14:
 612              		.cfi_def_cfa_offset 24
 613 0004 00AF     		add	r7, sp, #0
 614              	.LCFI15:
 615              		.cfi_def_cfa_register 7
 616 0006 F860     		str	r0, [r7, #12]
 617 0008 B960     		str	r1, [r7, #8]
 618 000a 7A60     		str	r2, [r7, #4]
 135:../Sources/EdgeDetection.c **** 	blurImage(input, length, blurredImage);
 619              		.loc 1 135 0
 620 000c F968     		ldr	r1, [r7, #12]
 621 000e 7A68     		ldr	r2, [r7, #4]
 622 0010 0C4B     		ldr	r3, .L37
 623 0012 081C     		mov	r0, r1
 624 0014 111C     		mov	r1, r2
 625 0016 1A1C     		mov	r2, r3
 626 0018 FFF7FEFF 		bl	blurImage
 136:../Sources/EdgeDetection.c **** 	sobelDerivative(blurredImage, length, derivativeImage);
 627              		.loc 1 136 0
 628 001c 0949     		ldr	r1, .L37
 629 001e 7A68     		ldr	r2, [r7, #4]
 630 0020 094B     		ldr	r3, .L37+4
 631 0022 081C     		mov	r0, r1
 632 0024 111C     		mov	r1, r2
 633 0026 1A1C     		mov	r2, r3
 634 0028 FFF7FEFF 		bl	sobelDerivative
 137:../Sources/EdgeDetection.c **** 	findLocalMax(derivativeImage, length, output);
 635              		.loc 1 137 0
 636 002c 0649     		ldr	r1, .L37+4
 637 002e 7A68     		ldr	r2, [r7, #4]
 638 0030 BB68     		ldr	r3, [r7, #8]
 639 0032 081C     		mov	r0, r1
 640 0034 111C     		mov	r1, r2
 641 0036 1A1C     		mov	r2, r3
 642 0038 FFF7FEFF 		bl	findLocalMax
 138:../Sources/EdgeDetection.c **** }
 643              		.loc 1 138 0
 644 003c BD46     		mov	sp, r7
 645 003e 04B0     		add	sp, sp, #16
 646              		@ sp needed for prologue
 647 0040 80BD     		pop	{r7, pc}
 648              	.L38:
 649 0042 C046     		.align	2
 650              	.L37:
 651 0044 00000000 		.word	blurredImage
 652 0048 00000000 		.word	derivativeImage
 653              		.cfi_endproc
 654              	.LFE4:
 656              		.text
 657              	.Letext0:
 658              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
DEFINED SYMBOLS
                            *ABS*:00000000 EdgeDetection.c
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:22     .bss.Kernel:00000000 Kernel
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:19     .bss.Kernel:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:25     .bss.blurredImage:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:28     .bss.blurredImage:00000000 blurredImage
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:31     .bss.derivativeImage:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:34     .bss.derivativeImage:00000000 derivativeImage
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:41     .text.generateKernel:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:46     .text.generateKernel:00000000 generateKernel
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:175    .text.generateKernel:000000d0 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:190    .text.blurImage:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:195    .text.blurImage:00000000 blurImage
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:358    .text.blurImage:000000d8 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:363    .text.sobelDerivative:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:368    .text.sobelDerivative:00000000 sobelDerivative
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:450    .text.findLocalMax:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:455    .text.findLocalMax:00000000 findLocalMax
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:596    .text.edgeDetection:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:601    .text.edgeDetection:00000000 edgeDetection
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:651    .text.edgeDetection:00000044 $d
                     .debug_frame:00000010 $d
C:\Users\admin\AppData\Local\Temp\ccQ3gbZg.s:189    .text.generateKernel:000000fc $t

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
pow
