   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_arm_cm0.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.stop,"ax",%progbits
  18              		.align	2
  19              		.global	stop
  20              		.code	16
  21              		.thumb_func
  23              	stop:
  24              	.LFB0:
  25              		.file 1 "../Sources/TFC/TFC_arm_cm0.c"
   1:../Sources/TFC/TFC_arm_cm0.c **** #include "derivative.h"
   2:../Sources/TFC/TFC_arm_cm0.c **** #include "TFC\TFC_arm_cm0.h"
   3:../Sources/TFC/TFC_arm_cm0.c **** 
   4:../Sources/TFC/TFC_arm_cm0.c **** void stop (void)
   5:../Sources/TFC/TFC_arm_cm0.c **** {
  26              		.loc 1 5 0
  27              		.cfi_startproc
   6:../Sources/TFC/TFC_arm_cm0.c **** 	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
   7:../Sources/TFC/TFC_arm_cm0.c **** 	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
  28              		.loc 1 7 0
  29 0000 044A     		ldr	r2, .L2
  30 0002 D123     		mov	r3, #209
  31 0004 1B01     		lsl	r3, r3, #4
  32 0006 D058     		ldr	r0, [r2, r3]
  33 0008 0421     		mov	r1, #4
  34 000a 0143     		orr	r1, r0
  35 000c D150     		str	r1, [r2, r3]
   8:../Sources/TFC/TFC_arm_cm0.c **** 
   9:../Sources/TFC/TFC_arm_cm0.c **** 	/* WFI instruction will start entry into STOP mode */
  10:../Sources/TFC/TFC_arm_cm0.c **** #ifndef KEIL
  11:../Sources/TFC/TFC_arm_cm0.c ****         // If not using KEIL's uVision use the standard assembly command
  12:../Sources/TFC/TFC_arm_cm0.c **** 	__asm("WFI");
  36              		.loc 1 12 0
  37              	@ 12 "../Sources/TFC/TFC_arm_cm0.c" 1
  38 000e 30BF     		WFI
  39              	@ 0 "" 2
  13:../Sources/TFC/TFC_arm_cm0.c **** #else
  14:../Sources/TFC/TFC_arm_cm0.c ****         // If using KEIL's uVision, use the CMSIS intrinsic
  15:../Sources/TFC/TFC_arm_cm0.c **** 	__wfi();
  16:../Sources/TFC/TFC_arm_cm0.c **** #endif
  17:../Sources/TFC/TFC_arm_cm0.c **** }
  40              		.loc 1 17 0
  41              		.code	16
  42              		@ sp needed for prologue
  43 0010 7047     		bx	lr
  44              	.L3:
  45 0012 C046     		.align	2
  46              	.L2:
  47 0014 00E000E0 		.word	-536813568
  48              		.cfi_endproc
  49              	.LFE0:
  51              		.section	.text.wait,"ax",%progbits
  52              		.align	2
  53              		.global	wait
  54              		.code	16
  55              		.thumb_func
  57              	wait:
  58              	.LFB1:
  18:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  19:../Sources/TFC/TFC_arm_cm0.c **** /*
  20:../Sources/TFC/TFC_arm_cm0.c ****  * Configures the ARM system control register for WAIT (sleep) mode
  21:../Sources/TFC/TFC_arm_cm0.c ****  * and then executes the WFI instruction to enter the mode.
  22:../Sources/TFC/TFC_arm_cm0.c ****  *
  23:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  24:../Sources/TFC/TFC_arm_cm0.c ****  * none
  25:../Sources/TFC/TFC_arm_cm0.c ****  *
  26:../Sources/TFC/TFC_arm_cm0.c ****  * Note: Might want to change this later to allow for passing in a parameter
  27:../Sources/TFC/TFC_arm_cm0.c ****  *       to optionally set the sleep on exit bit.
  28:../Sources/TFC/TFC_arm_cm0.c ****  */
  29:../Sources/TFC/TFC_arm_cm0.c **** 
  30:../Sources/TFC/TFC_arm_cm0.c **** void wait (void)
  31:../Sources/TFC/TFC_arm_cm0.c **** {
  59              		.loc 1 31 0
  60              		.cfi_startproc
  32:../Sources/TFC/TFC_arm_cm0.c **** 	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
  33:../Sources/TFC/TFC_arm_cm0.c **** 	 * of deep sleep.
  34:../Sources/TFC/TFC_arm_cm0.c **** 	 */
  35:../Sources/TFC/TFC_arm_cm0.c **** 	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
  61              		.loc 1 35 0
  62 0000 044A     		ldr	r2, .L5
  63 0002 D123     		mov	r3, #209
  64 0004 1B01     		lsl	r3, r3, #4
  65 0006 D158     		ldr	r1, [r2, r3]
  66 0008 0420     		mov	r0, #4
  67 000a 8143     		bic	r1, r0
  68 000c D150     		str	r1, [r2, r3]
  36:../Sources/TFC/TFC_arm_cm0.c **** 
  37:../Sources/TFC/TFC_arm_cm0.c **** 	/* WFI instruction will start entry into WAIT mode */
  38:../Sources/TFC/TFC_arm_cm0.c **** #ifndef KEIL
  39:../Sources/TFC/TFC_arm_cm0.c ****         // If not using KEIL's uVision use the standard assembly command
  40:../Sources/TFC/TFC_arm_cm0.c **** 	__asm("WFI");
  69              		.loc 1 40 0
  70              	@ 40 "../Sources/TFC/TFC_arm_cm0.c" 1
  71 000e 30BF     		WFI
  72              	@ 0 "" 2
  41:../Sources/TFC/TFC_arm_cm0.c **** #else
  42:../Sources/TFC/TFC_arm_cm0.c ****         // If using KEIL's uVision, use the CMSIS intrinsic
  43:../Sources/TFC/TFC_arm_cm0.c ****     __wfi();
  44:../Sources/TFC/TFC_arm_cm0.c **** #endif
  45:../Sources/TFC/TFC_arm_cm0.c **** }
  73              		.loc 1 45 0
  74              		.code	16
  75              		@ sp needed for prologue
  76 0010 7047     		bx	lr
  77              	.L6:
  78 0012 C046     		.align	2
  79              	.L5:
  80 0014 00E000E0 		.word	-536813568
  81              		.cfi_endproc
  82              	.LFE1:
  84              		.section	.text.write_vtor,"ax",%progbits
  85              		.align	2
  86              		.global	write_vtor
  87              		.code	16
  88              		.thumb_func
  90              	write_vtor:
  91              	.LFB2:
  46:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  47:../Sources/TFC/TFC_arm_cm0.c **** /*
  48:../Sources/TFC/TFC_arm_cm0.c ****  * Change the value of the vector table offset register to the specified value.
  49:../Sources/TFC/TFC_arm_cm0.c ****  *
  50:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  51:../Sources/TFC/TFC_arm_cm0.c ****  * vtor     new value to write to the VTOR
  52:../Sources/TFC/TFC_arm_cm0.c ****  */
  53:../Sources/TFC/TFC_arm_cm0.c **** 
  54:../Sources/TFC/TFC_arm_cm0.c **** void write_vtor (int vtor)
  55:../Sources/TFC/TFC_arm_cm0.c **** {
  92              		.loc 1 55 0
  93              		.cfi_startproc
  94              	.LVL0:
  56:../Sources/TFC/TFC_arm_cm0.c ****         /* Write the VTOR with the new value */
  57:../Sources/TFC/TFC_arm_cm0.c ****         SCB_VTOR = vtor;	
  95              		.loc 1 57 0
  96 0000 014B     		ldr	r3, .L8
  97 0002 024A     		ldr	r2, .L8+4
  58:../Sources/TFC/TFC_arm_cm0.c **** }
  98              		.loc 1 58 0
  99              		@ sp needed for prologue
  57:../Sources/TFC/TFC_arm_cm0.c ****         SCB_VTOR = vtor;	
 100              		.loc 1 57 0
 101 0004 D050     		str	r0, [r2, r3]
 102              		.loc 1 58 0
 103 0006 7047     		bx	lr
 104              	.L9:
 105              		.align	2
 106              	.L8:
 107 0008 080D0000 		.word	3336
 108 000c 00E000E0 		.word	-536813568
 109              		.cfi_endproc
 110              	.LFE2:
 112              		.section	.text.enable_irq,"ax",%progbits
 113              		.align	2
 114              		.global	enable_irq
 115              		.code	16
 116              		.thumb_func
 118              	enable_irq:
 119              	.LFB3:
  59:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  60:../Sources/TFC/TFC_arm_cm0.c **** /*
  61:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to enable the specified IRQ.
  62:../Sources/TFC/TFC_arm_cm0.c ****  * 
  63:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to enable a single IRQ. 
  64:../Sources/TFC/TFC_arm_cm0.c ****  * Interrupts will also need to be enabled in the ARM core. This can be 
  65:../Sources/TFC/TFC_arm_cm0.c ****  * done using the EnableInterrupts macro.
  66:../Sources/TFC/TFC_arm_cm0.c ****  *
  67:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  68:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be enabled (the irq number NOT the vector number)
  69:../Sources/TFC/TFC_arm_cm0.c ****  */
  70:../Sources/TFC/TFC_arm_cm0.c **** 
  71:../Sources/TFC/TFC_arm_cm0.c **** #ifndef CMSIS
  72:../Sources/TFC/TFC_arm_cm0.c **** void enable_irq (int irq)
  73:../Sources/TFC/TFC_arm_cm0.c **** {   
 120              		.loc 1 73 0
 121              		.cfi_startproc
 122              	.LVL1:
 123 0000 30B5     		push	{r4, r5, lr}
 124              	.LCFI0:
 125              		.cfi_def_cfa_offset 12
 126              		.cfi_offset 4, -12
 127              		.cfi_offset 5, -8
 128              		.cfi_offset 14, -4
  74:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Up to 32 is 
  75:../Sources/TFC/TFC_arm_cm0.c ****      * used.
  76:../Sources/TFC/TFC_arm_cm0.c ****      *
  77:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
  78:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
  79:../Sources/TFC/TFC_arm_cm0.c ****      */
  80:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 129              		.loc 1 80 0
 130 0002 2028     		cmp	r0, #32
 131 0004 11DC     		bgt	.L10
  81:../Sources/TFC/TFC_arm_cm0.c ****     {
  82:../Sources/TFC/TFC_arm_cm0.c ****         // printf("\nERR! Invalid IRQ value passed to enable irq function!\n");	
  83:../Sources/TFC/TFC_arm_cm0.c ****     }
  84:../Sources/TFC/TFC_arm_cm0.c ****     else
  85:../Sources/TFC/TFC_arm_cm0.c ****     {
  86:../Sources/TFC/TFC_arm_cm0.c ****       /* Set the ICPR and ISER registers accordingly */
  87:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ICPR |= 1 << (irq%32);
 132              		.loc 1 87 0
 133 0006 C117     		asr	r1, r0, #31
 134 0008 C90E     		lsr	r1, r1, #27
 135 000a 4018     		add	r0, r0, r1
 136              	.LVL2:
 137 000c 1F25     		mov	r5, #31
 138 000e 074B     		ldr	r3, .L13
 139 0010 2840     		and	r0, r5
 140 0012 C022     		mov	r2, #192
 141 0014 5200     		lsl	r2, r2, #1
 142 0016 411A     		sub	r1, r0, r1
 143 0018 0120     		mov	r0, #1
 144 001a 9C58     		ldr	r4, [r3, r2]
 145 001c 8840     		lsl	r0, r0, r1
 146 001e 051C     		mov	r5, r0
 147 0020 2543     		orr	r5, r4
 148 0022 9D50     		str	r5, [r3, r2]
  88:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ISER |= 1 << (irq%32);
 149              		.loc 1 88 0
 150 0024 1A68     		ldr	r2, [r3]
 151 0026 1043     		orr	r0, r2
 152 0028 1860     		str	r0, [r3]
 153              	.L10:
  89:../Sources/TFC/TFC_arm_cm0.c ****     }
  90:../Sources/TFC/TFC_arm_cm0.c **** }
 154              		.loc 1 90 0
 155              		@ sp needed for prologue
 156 002a 30BD     		pop	{r4, r5, pc}
 157              	.L14:
 158              		.align	2
 159              	.L13:
 160 002c 00E100E0 		.word	-536813312
 161              		.cfi_endproc
 162              	.LFE3:
 164              		.section	.text.disable_irq,"ax",%progbits
 165              		.align	2
 166              		.global	disable_irq
 167              		.code	16
 168              		.thumb_func
 170              	disable_irq:
 171              	.LFB4:
  91:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  92:../Sources/TFC/TFC_arm_cm0.c **** /*
  93:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to disable the specified IRQ.
  94:../Sources/TFC/TFC_arm_cm0.c ****  * 
  95:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to disable a single IRQ. 
  96:../Sources/TFC/TFC_arm_cm0.c ****  * If you want to disable all interrupts, then use the DisableInterrupts
  97:../Sources/TFC/TFC_arm_cm0.c ****  * macro instead. 
  98:../Sources/TFC/TFC_arm_cm0.c ****  *
  99:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
 100:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be disabled (the irq number NOT the vector number)
 101:../Sources/TFC/TFC_arm_cm0.c ****  */
 102:../Sources/TFC/TFC_arm_cm0.c **** 
 103:../Sources/TFC/TFC_arm_cm0.c **** void disable_irq (int irq)
 104:../Sources/TFC/TFC_arm_cm0.c **** {
 172              		.loc 1 104 0
 173              		.cfi_startproc
 174              	.LVL3:
 175 0000 00B5     		push	{lr}
 176              	.LCFI1:
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 14, -4
 105:../Sources/TFC/TFC_arm_cm0.c ****     
 106:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
 107:../Sources/TFC/TFC_arm_cm0.c ****      * used.
 108:../Sources/TFC/TFC_arm_cm0.c ****      *
 109:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
 110:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
 111:../Sources/TFC/TFC_arm_cm0.c ****      */
 112:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 179              		.loc 1 112 0
 180 0002 2028     		cmp	r0, #32
 181 0004 0ADC     		bgt	.L15
 113:../Sources/TFC/TFC_arm_cm0.c ****     {
 114:../Sources/TFC/TFC_arm_cm0.c ****     	   // printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
 115:../Sources/TFC/TFC_arm_cm0.c ****     }
 116:../Sources/TFC/TFC_arm_cm0.c ****     else
 117:../Sources/TFC/TFC_arm_cm0.c ****       /* Set the ICER register accordingly */
 118:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ICER = 1 << (irq%32);
 182              		.loc 1 118 0
 183 0006 C317     		asr	r3, r0, #31
 184 0008 D90E     		lsr	r1, r3, #27
 185 000a 4018     		add	r0, r0, r1
 186              	.LVL4:
 187 000c 1F22     		mov	r2, #31
 188 000e 1040     		and	r0, r2
 189 0010 431A     		sub	r3, r0, r1
 190 0012 0121     		mov	r1, #1
 191 0014 9940     		lsl	r1, r1, r3
 192 0016 024B     		ldr	r3, .L17
 193 0018 8022     		mov	r2, #128
 194 001a 9950     		str	r1, [r3, r2]
 195              	.L15:
 119:../Sources/TFC/TFC_arm_cm0.c **** }
 196              		.loc 1 119 0
 197              		@ sp needed for prologue
 198 001c 00BD     		pop	{pc}
 199              	.L18:
 200 001e C046     		.align	2
 201              	.L17:
 202 0020 00E100E0 		.word	-536813312
 203              		.cfi_endproc
 204              	.LFE4:
 206              		.section	.text.set_irq_priority,"ax",%progbits
 207              		.align	2
 208              		.global	set_irq_priority
 209              		.code	16
 210              		.thumb_func
 212              	set_irq_priority:
 213              	.LFB5:
 120:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
 121:../Sources/TFC/TFC_arm_cm0.c **** /*
 122:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to set specified IRQ priority.
 123:../Sources/TFC/TFC_arm_cm0.c ****  * 
 124:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
 125:../Sources/TFC/TFC_arm_cm0.c ****  * Interrupts will also need to be enabled in the ARM core. This can be 
 126:../Sources/TFC/TFC_arm_cm0.c ****  * done using the EnableInterrupts macro.
 127:../Sources/TFC/TFC_arm_cm0.c ****  *
 128:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
 129:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be enabled (the irq number NOT the vector number)
 130:../Sources/TFC/TFC_arm_cm0.c ****  * prio   irq priority. 0-3 levels. 0 max priority
 131:../Sources/TFC/TFC_arm_cm0.c ****  */
 132:../Sources/TFC/TFC_arm_cm0.c **** 
 133:../Sources/TFC/TFC_arm_cm0.c **** void set_irq_priority (int irq, int prio)
 134:../Sources/TFC/TFC_arm_cm0.c **** {   
 214              		.loc 1 134 0
 215              		.cfi_startproc
 216              	.LVL5:
 217 0000 00B5     		push	{lr}
 218              	.LCFI2:
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 135:../Sources/TFC/TFC_arm_cm0.c ****     /*irq priority pointer*/
 136:../Sources/TFC/TFC_arm_cm0.c ****     uint8 *prio_reg;
 137:../Sources/TFC/TFC_arm_cm0.c ****     uint8 err = 0;
 138:../Sources/TFC/TFC_arm_cm0.c ****     uint8 div = 0;
 139:../Sources/TFC/TFC_arm_cm0.c ****     
 140:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
 141:../Sources/TFC/TFC_arm_cm0.c ****      * used.
 142:../Sources/TFC/TFC_arm_cm0.c ****      *
 143:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
 144:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
 145:../Sources/TFC/TFC_arm_cm0.c ****      */
 146:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 147:../Sources/TFC/TFC_arm_cm0.c ****     {
 148:../Sources/TFC/TFC_arm_cm0.c ****       //  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
 149:../Sources/TFC/TFC_arm_cm0.c ****         err = 1;
 150:../Sources/TFC/TFC_arm_cm0.c ****     }
 151:../Sources/TFC/TFC_arm_cm0.c **** 
 152:../Sources/TFC/TFC_arm_cm0.c ****     if (prio > 3)
 221              		.loc 1 152 0
 222 0002 0329     		cmp	r1, #3
 223 0004 0BDC     		bgt	.L19
 153:../Sources/TFC/TFC_arm_cm0.c ****     {
 154:../Sources/TFC/TFC_arm_cm0.c ****        // printf("\nERR! Invalid priority value passed to priority irq function!\n");
 155:../Sources/TFC/TFC_arm_cm0.c ****         err = 1;
 156:../Sources/TFC/TFC_arm_cm0.c ****     }
 157:../Sources/TFC/TFC_arm_cm0.c ****     
 158:../Sources/TFC/TFC_arm_cm0.c ****     if (err != 1)
 224              		.loc 1 158 0
 225 0006 2028     		cmp	r0, #32
 226 0008 09DC     		bgt	.L19
 227              	.LVL6:
 159:../Sources/TFC/TFC_arm_cm0.c ****     {
 160:../Sources/TFC/TFC_arm_cm0.c ****         /* Determine which of the NVICIPx corresponds to the irq */
 161:../Sources/TFC/TFC_arm_cm0.c ****         div = irq / 4;
 228              		.loc 1 161 0
 229 000a C317     		asr	r3, r0, #31
 230 000c 9A0F     		lsr	r2, r3, #30
 231 000e 1018     		add	r0, r2, r0
 232              	.LVL7:
 162:../Sources/TFC/TFC_arm_cm0.c ****         prio_reg = (uint8 *)((uint32)&NVIC_IP(div));
 163:../Sources/TFC/TFC_arm_cm0.c ****         /* Assign priority to IRQ */
 164:../Sources/TFC/TFC_arm_cm0.c ****         *prio_reg = ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
 165:../Sources/TFC/TFC_arm_cm0.c ****     }
 166:../Sources/TFC/TFC_arm_cm0.c **** }
 233              		.loc 1 166 0
 234 0010 8305     		lsl	r3, r0, #22
 235 0012 1A0E     		lsr	r2, r3, #24
 164:../Sources/TFC/TFC_arm_cm0.c ****         *prio_reg = ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
 236              		.loc 1 164 0
 237 0014 024B     		ldr	r3, .L21
 238 0016 9000     		lsl	r0, r2, #2
 239 0018 C218     		add	r2, r0, r3
 240 001a 8901     		lsl	r1, r1, #6
 241              	.LVL8:
 242 001c 1170     		strb	r1, [r2]
 243              	.LVL9:
 244              	.L19:
 245              		.loc 1 166 0
 246              		@ sp needed for prologue
 247 001e 00BD     		pop	{pc}
 248              	.L22:
 249              		.align	2
 250              	.L21:
 251 0020 00E400E0 		.word	-536812544
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.text
 256              	.Letext0:
 257              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 258              		.file 3 "C:/Users/bentr_000/Desktop/FRDM-TFC/Project_Headers/MKL25Z4.h"
 259              		.file 4 "C:/Users/bentr_000/Desktop/FRDM-TFC/Project_Headers/TFC\\TFC_arm_cm0.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_arm_cm0.c
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:18     .text.stop:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:23     .text.stop:00000000 stop
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:47     .text.stop:00000014 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:52     .text.wait:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:57     .text.wait:00000000 wait
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:80     .text.wait:00000014 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:85     .text.write_vtor:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:90     .text.write_vtor:00000000 write_vtor
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:107    .text.write_vtor:00000008 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:113    .text.enable_irq:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:118    .text.enable_irq:00000000 enable_irq
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:160    .text.enable_irq:0000002c $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:165    .text.disable_irq:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:170    .text.disable_irq:00000000 disable_irq
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:202    .text.disable_irq:00000020 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:207    .text.set_irq_priority:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:212    .text.set_irq_priority:00000000 set_irq_priority
C:\Users\BENTR_~1\AppData\Local\Temp\ccZfZ1t8.s:251    .text.set_irq_priority:00000020 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
