   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SpeedSensor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TFC_InitSpeedSensor,"ax",%progbits
  18              		.align	2
  19              		.global	TFC_InitSpeedSensor
  20              		.code	16
  21              		.thumb_func
  23              	TFC_InitSpeedSensor:
  24              	.LFB0:
  25              		.file 1 "../Sources/SpeedSensor.c"
   1:../Sources/SpeedSensor.c **** /*
   2:../Sources/SpeedSensor.c ****  * SpeedSensor.h
   3:../Sources/SpeedSensor.c ****  *
   4:../Sources/SpeedSensor.c ****  *  Created on: Feb 4, 2014
   5:../Sources/SpeedSensor.c ****  *      Author: Matt
   6:../Sources/SpeedSensor.c ****  *      Modified By: Miroslav Dobrev
   7:../Sources/SpeedSensor.c ****  */
   8:../Sources/SpeedSensor.c **** 
   9:../Sources/SpeedSensor.c **** #include "SpeedSensor.h"
  10:../Sources/SpeedSensor.c **** 
  11:../Sources/SpeedSensor.c **** #define PERIOD 1.0f/187200.0f				//Calculated from known input
  12:../Sources/SpeedSensor.c **** #define WHEEL_DIAMETER 0.049f 				// Wheel diameter considering tyre compression because of car wei
  13:../Sources/SpeedSensor.c **** #define RATE_SCALER 10*2*187500.0f/7.5f		// 10*2*(timer_frequency)/(gear_ratio)																				
  14:../Sources/SpeedSensor.c **** #define MIN_SPEED_DETECTABLE 3.0f
  15:../Sources/SpeedSensor.c **** #define MAX_QUARTER_PERIOD  RATE_SCALER / (4.0f*MIN_SPEED_DETECTABLE)
  16:../Sources/SpeedSensor.c **** 
  17:../Sources/SpeedSensor.c **** static volatile struct speed_s speeds[2];
  18:../Sources/SpeedSensor.c **** 
  19:../Sources/SpeedSensor.c **** void TFC_InitSpeedSensor()
  20:../Sources/SpeedSensor.c **** {
  26              		.loc 1 20 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  21:../Sources/SpeedSensor.c **** 	disable_irq(INT_TPM2 - 16);
  33              		.loc 1 21 0
  34 0002 1320     		mov	r0, #19
  35 0004 FFF7FEFF 		bl	disable_irq
  36              	.LVL0:
  22:../Sources/SpeedSensor.c **** 
  23:../Sources/SpeedSensor.c **** 	GPIOA_PDDR &= 0xFFFFFFF9; //Configure PTA1 and PTA2 as inputs
  37              		.loc 1 23 0
  38 0008 1A4B     		ldr	r3, .L2
  39 000a 0621     		mov	r1, #6
  40 000c 5A69     		ldr	r2, [r3, #20]
  24:../Sources/SpeedSensor.c **** 
  25:../Sources/SpeedSensor.c **** 	PORTA_PCR1 &= 0xFFFFF8FF;
  26:../Sources/SpeedSensor.c **** 	PORTA_PCR1 |= 0x00000300;
  27:../Sources/SpeedSensor.c **** 	PORTA_PCR2 &= 0xFFFFF8FF;
  28:../Sources/SpeedSensor.c **** 	PORTA_PCR2 |= 0x00000300;
  29:../Sources/SpeedSensor.c **** 
  30:../Sources/SpeedSensor.c **** 	SIM_SCGC6 |= SIM_SCGC6_TPM2_MASK; //Enable clock gate to TPM2 module
  31:../Sources/SpeedSensor.c **** 
  32:../Sources/SpeedSensor.c **** 	TPM2_SC |= 0x004F; //LPTPM counter increments on every LPTPM counter clock, prescaler of 128, inte
  33:../Sources/SpeedSensor.c **** 	TPM2_MOD = 0xFFFF;
  34:../Sources/SpeedSensor.c **** 	TPM2_C0SC = 0x0000 | 0b1001100; //Channel interrupts enabled, input capture mode, both edges
  35:../Sources/SpeedSensor.c **** 	TPM2_C1SC = 0x0000 | 0b1001100; //Channel interrupts enabled, input capture mode, both edges
  36:../Sources/SpeedSensor.c **** 
  37:../Sources/SpeedSensor.c **** 	TPM2_CONF |= 0x00000000; //Timer doesn't continue when debug paused
  38:../Sources/SpeedSensor.c **** 
  39:../Sources/SpeedSensor.c **** 	TPM2_C0SC |= 0x0080; //Clear interrupt flag by writing a 1 to it (weird but the datasheet says so)
  40:../Sources/SpeedSensor.c **** 
  41:../Sources/SpeedSensor.c **** 
  42:../Sources/SpeedSensor.c **** 	set_irq_priority(INT_TPM2 - 16, 3); //Set to lowest priority
  43:../Sources/SpeedSensor.c **** 	enable_irq(INT_TPM2 - 16);
  44:../Sources/SpeedSensor.c **** }
  41              		.loc 1 44 0
  42              		@ sp needed for prologue
  23:../Sources/SpeedSensor.c **** 	GPIOA_PDDR &= 0xFFFFFFF9; //Configure PTA1 and PTA2 as inputs
  43              		.loc 1 23 0
  44 000e 8A43     		bic	r2, r1
  45 0010 5A61     		str	r2, [r3, #20]
  25:../Sources/SpeedSensor.c **** 	PORTA_PCR1 &= 0xFFFFF8FF;
  46              		.loc 1 25 0
  47 0012 194B     		ldr	r3, .L2+4
  48 0014 1949     		ldr	r1, .L2+8
  49 0016 5868     		ldr	r0, [r3, #4]
  26:../Sources/SpeedSensor.c **** 	PORTA_PCR1 |= 0x00000300;
  50              		.loc 1 26 0
  51 0018 C022     		mov	r2, #192
  25:../Sources/SpeedSensor.c **** 	PORTA_PCR1 &= 0xFFFFF8FF;
  52              		.loc 1 25 0
  53 001a 0840     		and	r0, r1
  54 001c 5860     		str	r0, [r3, #4]
  26:../Sources/SpeedSensor.c **** 	PORTA_PCR1 |= 0x00000300;
  55              		.loc 1 26 0
  56 001e 5868     		ldr	r0, [r3, #4]
  57 0020 9200     		lsl	r2, r2, #2
  58 0022 1043     		orr	r0, r2
  59 0024 5860     		str	r0, [r3, #4]
  27:../Sources/SpeedSensor.c **** 	PORTA_PCR2 &= 0xFFFFF8FF;
  60              		.loc 1 27 0
  61 0026 9868     		ldr	r0, [r3, #8]
  62 0028 0140     		and	r1, r0
  63 002a 9960     		str	r1, [r3, #8]
  28:../Sources/SpeedSensor.c **** 	PORTA_PCR2 |= 0x00000300;
  64              		.loc 1 28 0
  65 002c 9968     		ldr	r1, [r3, #8]
  66 002e 0A43     		orr	r2, r1
  67 0030 9A60     		str	r2, [r3, #8]
  30:../Sources/SpeedSensor.c **** 	SIM_SCGC6 |= SIM_SCGC6_TPM2_MASK; //Enable clock gate to TPM2 module
  68              		.loc 1 30 0
  69 0032 134A     		ldr	r2, .L2+12
  70 0034 134B     		ldr	r3, .L2+16
  71 0036 8021     		mov	r1, #128
  72 0038 D058     		ldr	r0, [r2, r3]
  73 003a C904     		lsl	r1, r1, #19
  74 003c 0143     		orr	r1, r0
  75 003e D150     		str	r1, [r2, r3]
  32:../Sources/SpeedSensor.c **** 	TPM2_SC |= 0x004F; //LPTPM counter increments on every LPTPM counter clock, prescaler of 128, inte
  76              		.loc 1 32 0
  77 0040 114B     		ldr	r3, .L2+20
  33:../Sources/SpeedSensor.c **** 	TPM2_MOD = 0xFFFF;
  78              		.loc 1 33 0
  79 0042 1249     		ldr	r1, .L2+24
  32:../Sources/SpeedSensor.c **** 	TPM2_SC |= 0x004F; //LPTPM counter increments on every LPTPM counter clock, prescaler of 128, inte
  80              		.loc 1 32 0
  81 0044 1868     		ldr	r0, [r3]
  82 0046 4F22     		mov	r2, #79
  83 0048 0243     		orr	r2, r0
  34:../Sources/SpeedSensor.c **** 	TPM2_C0SC = 0x0000 | 0b1001100; //Channel interrupts enabled, input capture mode, both edges
  84              		.loc 1 34 0
  85 004a 4C20     		mov	r0, #76
  32:../Sources/SpeedSensor.c **** 	TPM2_SC |= 0x004F; //LPTPM counter increments on every LPTPM counter clock, prescaler of 128, inte
  86              		.loc 1 32 0
  87 004c 1A60     		str	r2, [r3]
  33:../Sources/SpeedSensor.c **** 	TPM2_MOD = 0xFFFF;
  88              		.loc 1 33 0
  89 004e 9960     		str	r1, [r3, #8]
  37:../Sources/SpeedSensor.c **** 	TPM2_CONF |= 0x00000000; //Timer doesn't continue when debug paused
  90              		.loc 1 37 0
  91 0050 8422     		mov	r2, #132
  34:../Sources/SpeedSensor.c **** 	TPM2_C0SC = 0x0000 | 0b1001100; //Channel interrupts enabled, input capture mode, both edges
  92              		.loc 1 34 0
  93 0052 D860     		str	r0, [r3, #12]
  35:../Sources/SpeedSensor.c **** 	TPM2_C1SC = 0x0000 | 0b1001100; //Channel interrupts enabled, input capture mode, both edges
  94              		.loc 1 35 0
  95 0054 5861     		str	r0, [r3, #20]
  37:../Sources/SpeedSensor.c **** 	TPM2_CONF |= 0x00000000; //Timer doesn't continue when debug paused
  96              		.loc 1 37 0
  97 0056 9958     		ldr	r1, [r3, r2]
  98 0058 9950     		str	r1, [r3, r2]
  39:../Sources/SpeedSensor.c **** 	TPM2_C0SC |= 0x0080; //Clear interrupt flag by writing a 1 to it (weird but the datasheet says so)
  99              		.loc 1 39 0
 100 005a D868     		ldr	r0, [r3, #12]
 101 005c 8022     		mov	r2, #128
 102 005e 0243     		orr	r2, r0
 103 0060 DA60     		str	r2, [r3, #12]
  42:../Sources/SpeedSensor.c **** 	set_irq_priority(INT_TPM2 - 16, 3); //Set to lowest priority
 104              		.loc 1 42 0
 105 0062 1320     		mov	r0, #19
 106 0064 0321     		mov	r1, #3
 107 0066 FFF7FEFF 		bl	set_irq_priority
 108              	.LVL1:
  43:../Sources/SpeedSensor.c **** 	enable_irq(INT_TPM2 - 16);
 109              		.loc 1 43 0
 110 006a 1320     		mov	r0, #19
 111 006c FFF7FEFF 		bl	enable_irq
 112              	.LVL2:
 113              		.loc 1 44 0
 114 0070 08BD     		pop	{r3, pc}
 115              	.L3:
 116 0072 C046     		.align	2
 117              	.L2:
 118 0074 00F00F40 		.word	1074786304
 119 0078 00900440 		.word	1074040832
 120 007c FFF8FFFF 		.word	-1793
 121 0080 00700440 		.word	1074032640
 122 0084 3C100000 		.word	4156
 123 0088 00A00340 		.word	1073979392
 124 008c FFFF0000 		.word	65535
 125              		.cfi_endproc
 126              	.LFE0:
 128              		.global	__aeabi_ui2f
 129              		.global	__aeabi_fcmpgt
 130              		.section	.text.isANewmeasurementAvailable,"ax",%progbits
 131              		.align	2
 132              		.global	isANewmeasurementAvailable
 133              		.code	16
 134              		.thumb_func
 136              	isANewmeasurementAvailable:
 137              	.LFB1:
  45:../Sources/SpeedSensor.c **** 
  46:../Sources/SpeedSensor.c **** volatile isNewMeasurementAvailable_t* isANewmeasurementAvailable(uint8_t channel)
  47:../Sources/SpeedSensor.c **** {
 138              		.loc 1 47 0
 139              		.cfi_startproc
 140              	.LVL3:
 141 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 142              	.LCFI1:
 143              		.cfi_def_cfa_offset 20
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 149 0002 4746     		mov	r7, r8
 150 0004 80B4     		push	{r7}
 151              	.LCFI2:
 152              		.cfi_def_cfa_offset 24
 153              		.cfi_offset 8, -24
  48:../Sources/SpeedSensor.c **** 	//check for timeout, if current value - previous is greater than 5 rev/s
  49:../Sources/SpeedSensor.c **** 	if (speeds[channel].overflowed > 0)
 154              		.loc 1 49 0
 155 0006 4600     		lsl	r6, r0, #1
 156 0008 3318     		add	r3, r6, r0
 157 000a 1A4D     		ldr	r5, .L12
  47:../Sources/SpeedSensor.c **** {
 158              		.loc 1 47 0
 159 000c 041C     		mov	r4, r0
 160              		.loc 1 49 0
 161 000e D800     		lsl	r0, r3, #3
 162              	.LVL4:
 163 0010 2B18     		add	r3, r5, r0
 164 0012 1022     		mov	r2, #16
 165 0014 1F7C     		ldrb	r7, [r3, #16]
 166 0016 D118     		add	r1, r2, r3
 167 0018 8846     		mov	r8, r1
  50:../Sources/SpeedSensor.c **** 	{
  51:../Sources/SpeedSensor.c **** 		if(((uint32_t) TPM2_CNT + ((uint32_t)0xFFFF - speeds[channel].previousCount) + (0xFFFF * ((uint32
 168              		.loc 1 51 0
 169 001a 1748     		ldr	r0, .L12+4
  49:../Sources/SpeedSensor.c **** 	if (speeds[channel].overflowed > 0)
 170              		.loc 1 49 0
 171 001c 002F     		cmp	r7, #0
 172 001e 1AD0     		beq	.L5
 173              		.loc 1 51 0
 174 0020 4768     		ldr	r7, [r0, #4]
 175 0022 1A89     		ldrh	r2, [r3, #8]
 176 0024 1B7C     		ldrb	r3, [r3, #16]
 177 0026 1904     		lsl	r1, r3, #16
 178 0028 C81A     		sub	r0, r1, r3
 179 002a 821A     		sub	r2, r0, r2
 180 002c D019     		add	r0, r2, r7
 181 002e FFF7FEFF 		bl	__aeabi_ui2f
 182              	.LVL5:
 183 0032 1249     		ldr	r1, .L12+8
 184 0034 FFF7FEFF 		bl	__aeabi_fcmpgt
 185              	.LVL6:
 186 0038 0028     		cmp	r0, #0
 187 003a 04D0     		beq	.L6
  52:../Sources/SpeedSensor.c **** 		{
  53:../Sources/SpeedSensor.c **** 			speeds[channel].speed = 0;
 188              		.loc 1 53 0
 189 003c 4146     		mov	r1, r8
 190 003e 0027     		mov	r7, #0
  54:../Sources/SpeedSensor.c **** 			speeds[channel].measurementAvailable = NEW_MEASUREMENT_AVAILABLE;
 191              		.loc 1 54 0
 192 0040 0023     		mov	r3, #0
  53:../Sources/SpeedSensor.c **** 			speeds[channel].speed = 0;
 193              		.loc 1 53 0
 194 0042 4F60     		str	r7, [r1, #4]
 195              		.loc 1 54 0
 196 0044 4B70     		strb	r3, [r1, #1]
 197              	.L6:
  55:../Sources/SpeedSensor.c **** 		}
  56:../Sources/SpeedSensor.c **** 	}
  57:../Sources/SpeedSensor.c **** 	else
  58:../Sources/SpeedSensor.c **** 	{
  59:../Sources/SpeedSensor.c **** 		if(TPM2_CNT - speeds[channel].previousCount > MAX_QUARTER_PERIOD)
  60:../Sources/SpeedSensor.c **** 		{
  61:../Sources/SpeedSensor.c **** 			speeds[channel].speed = 0;
  62:../Sources/SpeedSensor.c **** 			speeds[channel].measurementAvailable = NEW_MEASUREMENT_AVAILABLE;
  63:../Sources/SpeedSensor.c **** 		}
  64:../Sources/SpeedSensor.c **** 	}
  65:../Sources/SpeedSensor.c **** 	
  66:../Sources/SpeedSensor.c **** 	return &speeds[channel].measurementAvailable;
 198              		.loc 1 66 0
 199 0046 3419     		add	r4, r6, r4
 200 0048 E600     		lsl	r6, r4, #3
 201 004a AD19     		add	r5, r5, r6
 202 004c 281C     		mov	r0, r5
 203 004e 1130     		add	r0, r0, #17
  67:../Sources/SpeedSensor.c **** }
 204              		.loc 1 67 0
 205              		@ sp needed for prologue
 206 0050 04BC     		pop	{r2}
 207 0052 9046     		mov	r8, r2
 208 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 209              	.L5:
  59:../Sources/SpeedSensor.c **** 		if(TPM2_CNT - speeds[channel].previousCount > MAX_QUARTER_PERIOD)
 210              		.loc 1 59 0
 211 0056 4268     		ldr	r2, [r0, #4]
 212 0058 1B89     		ldrh	r3, [r3, #8]
 213 005a D01A     		sub	r0, r2, r3
 214 005c FFF7FEFF 		bl	__aeabi_ui2f
 215              	.LVL7:
 216 0060 0649     		ldr	r1, .L12+8
 217 0062 FFF7FEFF 		bl	__aeabi_fcmpgt
 218              	.LVL8:
 219 0066 0028     		cmp	r0, #0
 220 0068 EDD0     		beq	.L6
  61:../Sources/SpeedSensor.c **** 			speeds[channel].speed = 0;
 221              		.loc 1 61 0
 222 006a 4046     		mov	r0, r8
 223 006c 0021     		mov	r1, #0
 224 006e 4160     		str	r1, [r0, #4]
  62:../Sources/SpeedSensor.c **** 			speeds[channel].measurementAvailable = NEW_MEASUREMENT_AVAILABLE;
 225              		.loc 1 62 0
 226 0070 4770     		strb	r7, [r0, #1]
 227 0072 E8E7     		b	.L6
 228              	.L13:
 229              		.align	2
 230              	.L12:
 231 0074 00000000 		.word	.LANCHOR0
 232 0078 00A00340 		.word	1073979392
 233 007c ABC22247 		.word	1193460395
 234              		.cfi_endproc
 235              	.LFE1:
 237              		.global	__aeabi_fcmpeq
 238              		.global	__aeabi_fdiv
 239              		.global	__aeabi_fmul
 240              		.section	.text.getSpeed,"ax",%progbits
 241              		.align	2
 242              		.global	getSpeed
 243              		.code	16
 244              		.thumb_func
 246              	getSpeed:
 247              	.LFB2:
  68:../Sources/SpeedSensor.c **** 
  69:../Sources/SpeedSensor.c **** float getSpeed(uint8_t channel)
  70:../Sources/SpeedSensor.c **** {
 248              		.loc 1 70 0
 249              		.cfi_startproc
 250              	.LVL9:
 251 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 252              	.LCFI3:
 253              		.cfi_def_cfa_offset 24
 254              		.cfi_offset 3, -24
 255              		.cfi_offset 4, -20
 256              		.cfi_offset 5, -16
 257              		.cfi_offset 6, -12
 258              		.cfi_offset 7, -8
 259              		.cfi_offset 14, -4
  71:../Sources/SpeedSensor.c **** 	if (channel > 1)
 260              		.loc 1 71 0
 261 0002 0128     		cmp	r0, #1
 262 0004 01D9     		bls	.L15
 263              	.LVL10:
 264              	.L17:
  72:../Sources/SpeedSensor.c **** 	{
  73:../Sources/SpeedSensor.c **** 		return 0; //Invalid access
 265              		.loc 1 73 0
 266 0006 0020     		mov	r0, #0
 267              	.L16:
  74:../Sources/SpeedSensor.c **** 	}
  75:../Sources/SpeedSensor.c **** 
  76:../Sources/SpeedSensor.c **** 	speeds[channel].period = 0;
  77:../Sources/SpeedSensor.c **** 	for (uint8_t i = 0; i < 2; i++)
  78:../Sources/SpeedSensor.c **** 	{
  79:../Sources/SpeedSensor.c **** 		if (speeds[channel].halfPeriodTimes[i] != 0.0f)
  80:../Sources/SpeedSensor.c **** 		{
  81:../Sources/SpeedSensor.c **** 			speeds[channel].period += speeds[channel].halfPeriodTimes[i];
  82:../Sources/SpeedSensor.c **** 		}
  83:../Sources/SpeedSensor.c **** 		else
  84:../Sources/SpeedSensor.c **** 		{
  85:../Sources/SpeedSensor.c **** 			return 0.0f;
  86:../Sources/SpeedSensor.c **** 		}
  87:../Sources/SpeedSensor.c **** 	}
  88:../Sources/SpeedSensor.c **** 
  89:../Sources/SpeedSensor.c **** 	speeds[channel].speed = WHEEL_DIAMETER * (RATE_SCALER / (float) speeds[channel].period);	// Speed 
  90:../Sources/SpeedSensor.c **** 	
  91:../Sources/SpeedSensor.c **** 	return speeds[channel].speed;
  92:../Sources/SpeedSensor.c **** }
 268              		.loc 1 92 0
 269              		@ sp needed for prologue
 270 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 271              	.LVL11:
 272              	.L15:
  76:../Sources/SpeedSensor.c **** 	speeds[channel].period = 0;
 273              		.loc 1 76 0
 274 000a 4700     		lsl	r7, r0, #1
 275 000c 164E     		ldr	r6, .L22
 276 000e 3818     		add	r0, r7, r0
 277              	.LVL12:
 278 0010 C700     		lsl	r7, r0, #3
 279 0012 F519     		add	r5, r6, r7
 280 0014 0023     		mov	r3, #0
 281 0016 EB60     		str	r3, [r5, #12]
 282              	.LBB2:
  79:../Sources/SpeedSensor.c **** 		if (speeds[channel].halfPeriodTimes[i] != 0.0f)
 283              		.loc 1 79 0
 284 0018 F059     		ldr	r0, [r6, r7]
 285              	.LBE2:
  76:../Sources/SpeedSensor.c **** 	speeds[channel].period = 0;
 286              		.loc 1 76 0
 287 001a 2C1C     		mov	r4, r5
 288              	.LBB3:
  79:../Sources/SpeedSensor.c **** 		if (speeds[channel].halfPeriodTimes[i] != 0.0f)
 289              		.loc 1 79 0
 290 001c FFF7FEFF 		bl	__aeabi_ui2f
 291              	.LVL13:
 292 0020 0021     		mov	r1, #0
 293              	.LBE3:
  76:../Sources/SpeedSensor.c **** 	speeds[channel].period = 0;
 294              		.loc 1 76 0
 295 0022 0834     		add	r4, r4, #8
 296              	.LVL14:
 297              	.LBB4:
  79:../Sources/SpeedSensor.c **** 		if (speeds[channel].halfPeriodTimes[i] != 0.0f)
 298              		.loc 1 79 0
 299 0024 FFF7FEFF 		bl	__aeabi_fcmpeq
 300              	.LVL15:
 301 0028 0028     		cmp	r0, #0
 302 002a ECD1     		bne	.L17
  81:../Sources/SpeedSensor.c **** 			speeds[channel].period += speeds[channel].halfPeriodTimes[i];
 303              		.loc 1 81 0
 304 002c 6168     		ldr	r1, [r4, #4]
 305 002e BA59     		ldr	r2, [r7, r6]
 306 0030 5618     		add	r6, r2, r1
 307 0032 6660     		str	r6, [r4, #4]
 308              	.LVL16:
  79:../Sources/SpeedSensor.c **** 		if (speeds[channel].halfPeriodTimes[i] != 0.0f)
 309              		.loc 1 79 0
 310 0034 6868     		ldr	r0, [r5, #4]
 311 0036 FFF7FEFF 		bl	__aeabi_ui2f
 312              	.LVL17:
 313 003a 0021     		mov	r1, #0
 314 003c FFF7FEFF 		bl	__aeabi_fcmpeq
 315              	.LVL18:
 316 0040 0028     		cmp	r0, #0
 317 0042 E0D1     		bne	.L17
  81:../Sources/SpeedSensor.c **** 			speeds[channel].period += speeds[channel].halfPeriodTimes[i];
 318              		.loc 1 81 0
 319 0044 6068     		ldr	r0, [r4, #4]
 320 0046 6F68     		ldr	r7, [r5, #4]
 321 0048 3B18     		add	r3, r7, r0
 322 004a 6360     		str	r3, [r4, #4]
 323              	.LVL19:
 324              	.LBE4:
  89:../Sources/SpeedSensor.c **** 	speeds[channel].speed = WHEEL_DIAMETER * (RATE_SCALER / (float) speeds[channel].period);	// Speed 
 325              		.loc 1 89 0
 326 004c 6068     		ldr	r0, [r4, #4]
 327 004e FFF7FEFF 		bl	__aeabi_ui2f
 328              	.LVL20:
 329 0052 011C     		add	r1, r0, #0
 330 0054 0548     		ldr	r0, .L22+4
 331 0056 FFF7FEFF 		bl	__aeabi_fdiv
 332              	.LVL21:
 333 005a 0549     		ldr	r1, .L22+8
 334 005c FFF7FEFF 		bl	__aeabi_fmul
 335              	.LVL22:
 336 0060 6861     		str	r0, [r5, #20]
  91:../Sources/SpeedSensor.c **** 	return speeds[channel].speed;
 337              		.loc 1 91 0
 338 0062 6869     		ldr	r0, [r5, #20]
 339 0064 D0E7     		b	.L16
 340              	.L23:
 341 0066 C046     		.align	2
 342              	.L22:
 343 0068 00000000 		.word	.LANCHOR0
 344 006c 0024F448 		.word	1223959552
 345 0070 39B4483D 		.word	1028174905
 346              		.cfi_endproc
 347              	.LFE2:
 349              		.section	.text.FTM2_IRQHandler,"ax",%progbits
 350              		.align	2
 351              		.global	FTM2_IRQHandler
 352              		.code	16
 353              		.thumb_func
 355              	FTM2_IRQHandler:
 356              	.LFB3:
  93:../Sources/SpeedSensor.c **** 
  94:../Sources/SpeedSensor.c **** void FTM2_IRQHandler()
  95:../Sources/SpeedSensor.c **** {
 357              		.loc 1 95 0
 358              		.cfi_startproc
  96:../Sources/SpeedSensor.c **** 	if (((TPM2_SC >> 7) & 0x0001) == 0x0001) //If counter overflow interrupt flag is set
 359              		.loc 1 96 0
 360 0000 394B     		ldr	r3, .L43
  95:../Sources/SpeedSensor.c **** {
 361              		.loc 1 95 0
 362 0002 70B5     		push	{r4, r5, r6, lr}
 363              	.LCFI4:
 364              		.cfi_def_cfa_offset 16
 365              		.cfi_offset 4, -16
 366              		.cfi_offset 5, -12
 367              		.cfi_offset 6, -8
 368              		.cfi_offset 14, -4
 369              		.loc 1 96 0
 370 0004 1A68     		ldr	r2, [r3]
 371 0006 1006     		lsl	r0, r2, #24
 372 0008 0DD5     		bpl	.L25
  97:../Sources/SpeedSensor.c **** 	{
  98:../Sources/SpeedSensor.c **** 		TPM2_SC |= 0x00000080; //Clear counter overflow interrupt flag
 373              		.loc 1 98 0
 374 000a 1968     		ldr	r1, [r3]
 375 000c 8020     		mov	r0, #128
  99:../Sources/SpeedSensor.c **** 		speeds[0].overflowed++;
 376              		.loc 1 99 0
 377 000e 374C     		ldr	r4, .L43+4
  98:../Sources/SpeedSensor.c **** 		TPM2_SC |= 0x00000080; //Clear counter overflow interrupt flag
 378              		.loc 1 98 0
 379 0010 0843     		orr	r0, r1
 380 0012 1860     		str	r0, [r3]
 381              		.loc 1 99 0
 382 0014 257C     		ldrb	r5, [r4, #16]
 100:../Sources/SpeedSensor.c **** 		speeds[1].overflowed++;
 383              		.loc 1 100 0
 384 0016 2823     		mov	r3, #40
  99:../Sources/SpeedSensor.c **** 		speeds[0].overflowed++;
 385              		.loc 1 99 0
 386 0018 0135     		add	r5, r5, #1
 387 001a EEB2     		uxtb	r6, r5
 388 001c 2674     		strb	r6, [r4, #16]
 389              		.loc 1 100 0
 390 001e E25C     		ldrb	r2, [r4, r3]
 391 0020 0132     		add	r2, r2, #1
 392 0022 D1B2     		uxtb	r1, r2
 393 0024 E154     		strb	r1, [r4, r3]
 394              	.L25:
 101:../Sources/SpeedSensor.c **** 	}
 102:../Sources/SpeedSensor.c **** 
 103:../Sources/SpeedSensor.c **** 	if (((TPM2_C0SC >> 7) & 0x0001) == 0x0001) //If ch0 interrupt flag is set
 395              		.loc 1 103 0
 396 0026 304C     		ldr	r4, .L43
 397 0028 0126     		mov	r6, #1
 398 002a E068     		ldr	r0, [r4, #12]
 399 002c 0006     		lsl	r0, r0, #24
 400 002e 18D5     		bpl	.L26
 104:../Sources/SpeedSensor.c **** 	{
 105:../Sources/SpeedSensor.c **** 		TPM2_C0SC |= 0x0080; //Clear capture interrupt flag by writing a 1 to it, confirmed working!
 401              		.loc 1 105 0
 402 0030 E568     		ldr	r5, [r4, #12]
 403 0032 8023     		mov	r3, #128
 404 0034 2B43     		orr	r3, r5
 405 0036 E360     		str	r3, [r4, #12]
 106:../Sources/SpeedSensor.c **** 
 107:../Sources/SpeedSensor.c **** 		if(speeds[0].overflowed > 0)
 406              		.loc 1 107 0
 407 0038 2C4B     		ldr	r3, .L43+4
 408 003a 1A7C     		ldrb	r2, [r3, #16]
 409 003c 002A     		cmp	r2, #0
 410 003e 44D1     		bne	.L41
 108:../Sources/SpeedSensor.c **** 		{
 109:../Sources/SpeedSensor.c **** 			speeds[0].halfPeriodTimes[speeds[0].state & 0x01] = (uint32_t)TPM2_C0V + ((uint32_t)0xFFFF - spe
 110:../Sources/SpeedSensor.c **** 			speeds[0].overflowed = 0;
 111:../Sources/SpeedSensor.c **** 		}
 112:../Sources/SpeedSensor.c **** 		else
 113:../Sources/SpeedSensor.c **** 		{
 114:../Sources/SpeedSensor.c **** 			speeds[0].halfPeriodTimes[speeds[0].state & 0x01] = TPM2_C0V - speeds[0].previousCount;
 411              		.loc 1 114 0
 412 0040 997A     		ldrb	r1, [r3, #10]
 413 0042 2469     		ldr	r4, [r4, #16]
 414 0044 1889     		ldrh	r0, [r3, #8]
 415 0046 0E40     		and	r6, r1
 416 0048 251A     		sub	r5, r4, r0
 417 004a B600     		lsl	r6, r6, #2
 418 004c F550     		str	r5, [r6, r3]
 419              	.L28:
 115:../Sources/SpeedSensor.c **** 		}
 116:../Sources/SpeedSensor.c **** 		speeds[0].previousCount = TPM2_C0V;
 420              		.loc 1 116 0
 421 004e 264D     		ldr	r5, .L43
 117:../Sources/SpeedSensor.c **** 
 118:../Sources/SpeedSensor.c **** 		speeds[0].state++;
 119:../Sources/SpeedSensor.c **** 		speeds[0].measurementAvailable = NEW_MEASUREMENT_AVAILABLE;
 422              		.loc 1 119 0
 423 0050 0021     		mov	r1, #0
 116:../Sources/SpeedSensor.c **** 		speeds[0].previousCount = TPM2_C0V;
 424              		.loc 1 116 0
 425 0052 2A69     		ldr	r2, [r5, #16]
 426 0054 94B2     		uxth	r4, r2
 427 0056 1C81     		strh	r4, [r3, #8]
 118:../Sources/SpeedSensor.c **** 		speeds[0].state++;
 428              		.loc 1 118 0
 429 0058 987A     		ldrb	r0, [r3, #10]
 430 005a 0130     		add	r0, r0, #1
 431 005c C6B2     		uxtb	r6, r0
 432 005e 9E72     		strb	r6, [r3, #10]
 433              		.loc 1 119 0
 434 0060 5974     		strb	r1, [r3, #17]
 435              	.L26:
 120:../Sources/SpeedSensor.c **** 	}
 121:../Sources/SpeedSensor.c **** 
 122:../Sources/SpeedSensor.c **** 	if (((TPM2_C1SC >> 7) & 0x0001) == 0x0001) //If ch1 interrupt flag is set
 436              		.loc 1 122 0
 437 0062 214D     		ldr	r5, .L43
 438 0064 0120     		mov	r0, #1
 439 0066 6B69     		ldr	r3, [r5, #20]
 440 0068 1906     		lsl	r1, r3, #24
 441 006a 1DD5     		bpl	.L24
 123:../Sources/SpeedSensor.c **** 	{
 124:../Sources/SpeedSensor.c **** 		TPM2_C1SC |= 0x0080; //Clear capture interrupt flag by writing a 1 to it, confirmed working!
 442              		.loc 1 124 0
 443 006c 6A69     		ldr	r2, [r5, #20]
 444 006e 8024     		mov	r4, #128
 445 0070 1443     		orr	r4, r2
 125:../Sources/SpeedSensor.c **** 
 126:../Sources/SpeedSensor.c **** 		if(speeds[1].overflowed > 0)
 446              		.loc 1 126 0
 447 0072 1E4B     		ldr	r3, .L43+4
 124:../Sources/SpeedSensor.c **** 		TPM2_C1SC |= 0x0080; //Clear capture interrupt flag by writing a 1 to it, confirmed working!
 448              		.loc 1 124 0
 449 0074 6C61     		str	r4, [r5, #20]
 450              		.loc 1 126 0
 451 0076 2821     		mov	r1, #40
 452 0078 5E5C     		ldrb	r6, [r3, r1]
 453 007a 002E     		cmp	r6, #0
 454 007c 15D1     		bne	.L42
 127:../Sources/SpeedSensor.c **** 		{
 128:../Sources/SpeedSensor.c **** 			speeds[1].halfPeriodTimes[speeds[1].state & 0x01] = (uint32_t)TPM2_C1V + ((uint32_t)0xFFFF - spe
 129:../Sources/SpeedSensor.c **** 			speeds[1].overflowed = 0;
 130:../Sources/SpeedSensor.c **** 		}
 131:../Sources/SpeedSensor.c **** 		else
 132:../Sources/SpeedSensor.c **** 		{
 133:../Sources/SpeedSensor.c **** 			speeds[1].halfPeriodTimes[speeds[1].state & 0x01] = TPM2_C1V - speeds[1].previousCount;
 455              		.loc 1 133 0
 456 007e 2222     		mov	r2, #34
 457 0080 9C5C     		ldrb	r4, [r3, r2]
 458 0082 AD69     		ldr	r5, [r5, #24]
 459 0084 2040     		and	r0, r4
 460 0086 198C     		ldrh	r1, [r3, #32]
 461 0088 0630     		add	r0, r0, #6
 462 008a 6E1A     		sub	r6, r5, r1
 463 008c 8000     		lsl	r0, r0, #2
 464 008e C650     		str	r6, [r0, r3]
 465              	.L31:
 134:../Sources/SpeedSensor.c **** 		}
 135:../Sources/SpeedSensor.c **** 		speeds[1].previousCount = TPM2_C1V;
 466              		.loc 1 135 0
 467 0090 1549     		ldr	r1, .L43
 136:../Sources/SpeedSensor.c **** 
 137:../Sources/SpeedSensor.c **** 		speeds[1].state++;
 468              		.loc 1 137 0
 469 0092 2224     		mov	r4, #34
 135:../Sources/SpeedSensor.c **** 		speeds[1].previousCount = TPM2_C1V;
 470              		.loc 1 135 0
 471 0094 8A69     		ldr	r2, [r1, #24]
 138:../Sources/SpeedSensor.c **** 		speeds[1].measurementAvailable = NEW_MEASUREMENT_AVAILABLE;
 472              		.loc 1 138 0
 473 0096 0021     		mov	r1, #0
 135:../Sources/SpeedSensor.c **** 		speeds[1].previousCount = TPM2_C1V;
 474              		.loc 1 135 0
 475 0098 95B2     		uxth	r5, r2
 476 009a 1D84     		strh	r5, [r3, #32]
 137:../Sources/SpeedSensor.c **** 		speeds[1].state++;
 477              		.loc 1 137 0
 478 009c 185D     		ldrb	r0, [r3, r4]
 479              		.loc 1 138 0
 480 009e 2922     		mov	r2, #41
 137:../Sources/SpeedSensor.c **** 		speeds[1].state++;
 481              		.loc 1 137 0
 482 00a0 0130     		add	r0, r0, #1
 483 00a2 C6B2     		uxtb	r6, r0
 484 00a4 1E55     		strb	r6, [r3, r4]
 485              		.loc 1 138 0
 486 00a6 9954     		strb	r1, [r3, r2]
 487              	.L24:
 139:../Sources/SpeedSensor.c **** 	}
 140:../Sources/SpeedSensor.c **** }
 488              		.loc 1 140 0
 489              		@ sp needed for prologue
 490 00a8 70BD     		pop	{r4, r5, r6, pc}
 491              	.L42:
 128:../Sources/SpeedSensor.c **** 			speeds[1].halfPeriodTimes[speeds[1].state & 0x01] = (uint32_t)TPM2_C1V + ((uint32_t)0xFFFF - spe
 492              		.loc 1 128 0
 493 00aa 2222     		mov	r2, #34
 494 00ac 9C5C     		ldrb	r4, [r3, r2]
 495 00ae 2040     		and	r0, r4
 496 00b0 AC69     		ldr	r4, [r5, #24]
 497 00b2 1D8C     		ldrh	r5, [r3, #32]
 498 00b4 5A5C     		ldrb	r2, [r3, r1]
 499 00b6 0630     		add	r0, r0, #6
 500 00b8 1604     		lsl	r6, r2, #16
 501 00ba B21A     		sub	r2, r6, r2
 502 00bc 551B     		sub	r5, r2, r5
 503 00be 2C19     		add	r4, r5, r4
 504 00c0 8000     		lsl	r0, r0, #2
 129:../Sources/SpeedSensor.c **** 			speeds[1].overflowed = 0;
 505              		.loc 1 129 0
 506 00c2 0026     		mov	r6, #0
 128:../Sources/SpeedSensor.c **** 			speeds[1].halfPeriodTimes[speeds[1].state & 0x01] = (uint32_t)TPM2_C1V + ((uint32_t)0xFFFF - spe
 507              		.loc 1 128 0
 508 00c4 C450     		str	r4, [r0, r3]
 129:../Sources/SpeedSensor.c **** 			speeds[1].overflowed = 0;
 509              		.loc 1 129 0
 510 00c6 5E54     		strb	r6, [r3, r1]
 511 00c8 E2E7     		b	.L31
 512              	.L41:
 109:../Sources/SpeedSensor.c **** 			speeds[0].halfPeriodTimes[speeds[0].state & 0x01] = (uint32_t)TPM2_C0V + ((uint32_t)0xFFFF - spe
 513              		.loc 1 109 0
 514 00ca 9A7A     		ldrb	r2, [r3, #10]
 515 00cc 2169     		ldr	r1, [r4, #16]
 516 00ce 1C89     		ldrh	r4, [r3, #8]
 517 00d0 187C     		ldrb	r0, [r3, #16]
 518 00d2 1640     		and	r6, r2
 519 00d4 0504     		lsl	r5, r0, #16
 520 00d6 2A1A     		sub	r2, r5, r0
 521 00d8 141B     		sub	r4, r2, r4
 522 00da 6018     		add	r0, r4, r1
 523 00dc B600     		lsl	r6, r6, #2
 110:../Sources/SpeedSensor.c **** 			speeds[0].overflowed = 0;
 524              		.loc 1 110 0
 525 00de 0021     		mov	r1, #0
 109:../Sources/SpeedSensor.c **** 			speeds[0].halfPeriodTimes[speeds[0].state & 0x01] = (uint32_t)TPM2_C0V + ((uint32_t)0xFFFF - spe
 526              		.loc 1 109 0
 527 00e0 F050     		str	r0, [r6, r3]
 110:../Sources/SpeedSensor.c **** 			speeds[0].overflowed = 0;
 528              		.loc 1 110 0
 529 00e2 1974     		strb	r1, [r3, #16]
 530 00e4 B3E7     		b	.L28
 531              	.L44:
 532 00e6 C046     		.align	2
 533              	.L43:
 534 00e8 00A00340 		.word	1073979392
 535 00ec 00000000 		.word	.LANCHOR0
 536              		.cfi_endproc
 537              	.LFE3:
 539              		.section	.bss.speeds,"aw",%nobits
 540              		.align	2
 541              		.set	.LANCHOR0,. + 0
 544              	speeds:
 545 0000 00000000 		.space	48
 545      00000000 
 545      00000000 
 545      00000000 
 545      00000000 
 546              		.text
 547              	.Letext0:
 548              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 549              		.file 3 "C:/Users/bentr_000/Google Drive/GitHub/TFC-Group2-2016/CodeWarrior Code/FRDM-TFC/Project_
 550              		.file 4 "C:/Users/bentr_000/Google Drive/GitHub/TFC-Group2-2016/CodeWarrior Code/FRDM-TFC/Project_
DEFINED SYMBOLS
                            *ABS*:00000000 SpeedSensor.c
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:18     .text.TFC_InitSpeedSensor:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:23     .text.TFC_InitSpeedSensor:00000000 TFC_InitSpeedSensor
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:118    .text.TFC_InitSpeedSensor:00000074 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:131    .text.isANewmeasurementAvailable:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:136    .text.isANewmeasurementAvailable:00000000 isANewmeasurementAvailable
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:231    .text.isANewmeasurementAvailable:00000074 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:241    .text.getSpeed:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:246    .text.getSpeed:00000000 getSpeed
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:343    .text.getSpeed:00000068 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:350    .text.FTM2_IRQHandler:00000000 $t
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:355    .text.FTM2_IRQHandler:00000000 FTM2_IRQHandler
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:534    .text.FTM2_IRQHandler:000000e8 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:540    .bss.speeds:00000000 $d
C:\Users\BENTR_~1\AppData\Local\Temp\ccv0galF.s:544    .bss.speeds:00000000 speeds
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disable_irq
set_irq_priority
enable_irq
__aeabi_ui2f
__aeabi_fcmpgt
__aeabi_fcmpeq
__aeabi_fdiv
__aeabi_fmul
